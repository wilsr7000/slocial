<section class="hero">
  <h1>Slow letters, lasting resonance</h1>
  <p>Write slow, read slow. Letters steep for 12 hours. No rush, no noise.</p>
  <div class="hero-ctas">
    <% if (user) { %>
      <a class="btn btn-primary" href="/compose">Compose a letter</a>
    <% } else { %>
      <a class="btn btn-primary" href="/signup">Create account</a>
      <a class="btn btn-ghost" href="/login">Sign in</a>
    <% } %>
  </div>
</section>

<section class="features container">
  <div class="feature">
    <h3>12-hour steep</h3>
    <p>Space to reflect. Letters publish after a gentle pause.</p>
  </div>
  <div class="feature">
    <h3>Meaningful connections</h3>
    <p>Quality over quantity. Deep thoughts, genuine exchanges.</p>
  </div>
  <div class="feature">
    <h3>No scores</h3>
    <p>Resonate quietly. No public counters or popularity contests.</p>
  </div>
  <div class="feature">
    <h3>Thoughtful replies</h3>
    <p>One response per reader per letter keeps threads calm.</p>
  </div>
</section>

<section class="feed">
  <h2 class="section-title">Latest letters</h2>
  <% if (letters.length === 0) { %>
    <p class="empty">No letters yet. Come back later.</p>
  <% } %>
  <% letters.forEach(letter => { %>
    <article class="letter">
      <h2><a href="/letters/<%= letter.id %>"><%= letter.title %></a></h2>
      <div class="meta"><%= new Date(letter.publish_at).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %></div>
      <p><%= letter.body.slice(0, 260) %><% if (letter.body.length > 260) { %>â€¦<% } %></p>
      
      <!-- Author section -->
      <div class="feed-author">
        <div class="feed-author-avatar">
          <% if (letter.avatar_url) { %>
            <img src="<%= letter.avatar_url %>" alt="<%= letter.handle %>" onerror="this.style.display='none'; this.parentElement.innerHTML='<span style=\"font-size:16px\">ðŸ‘¤</span>';">
          <% } else { %>
            <span style="font-size: 16px;">ðŸ‘¤</span>
          <% } %>
        </div>
        <div class="feed-author-info">
          <div class="feed-author-name">@<%= letter.handle %></div>
          <% if (letter.bio) { %>
            <div class="feed-author-bio"><%= letter.bio.slice(0, 100) %><% if (letter.bio.length > 100) { %>â€¦<% } %></div>
          <% } %>
        </div>
      </div>
      
      <div class="actions">
        <% if (user) { %>
          <div class="reading-actions">
            <% if (letter.reading_status === 'read') { %>
              <button class="reading-btn read completed" disabled>
                <span class="icon">âœ“</span> Read
              </button>
            <% } else if (letter.reading_status === 'skip') { %>
              <button class="reading-btn skip completed" disabled>
                <span class="icon">â†’</span> Skipped
              </button>
            <% } else if (letter.reading_status === 'later') { %>
              <button class="reading-btn later active" onclick="updateReadingStatus(<%= letter.id %>, 'remove')">
                <span class="icon">ðŸ”–</span> Saved
              </button>
            <% } else { %>
              <button class="reading-btn read" onclick="window.location.href='/letters/<%= letter.id %>'">
                <span class="icon">ðŸ“–</span> Read
              </button>
              <button class="reading-btn skip" onclick="updateReadingStatus(<%= letter.id %>, 'skip')">
                <span class="icon">â†’</span> Skip
              </button>
              <button class="reading-btn later" onclick="updateReadingStatus(<%= letter.id %>, 'later')">
                <span class="icon">ðŸ”–</span> Later
              </button>
            <% } %>
          </div>
          
          <div class="resonate-action">
            <% if (letter.did_resonate) { %>
              <form action="/letters/<%= letter.id %>/unresonate" method="post"><input type="hidden" name="_csrf" value="<%= csrfToken %>" /><button class="btn resonate-btn active">Resonated</button></form>
            <% } else { %>
              <form action="/letters/<%= letter.id %>/resonate" method="post"><input type="hidden" name="_csrf" value="<%= csrfToken %>" /><button class="btn resonate-btn">Resonate</button></form>
            <% } %>
          </div>
        <% } %>
      </div>
    </article>
  <% }) %>

  <!-- Loading indicator -->
  <div id="loading-indicator" style="display: none; text-align: center; padding: 40px;">
    <div class="loading-spinner"></div>
    <p style="color: var(--muted); margin-top: 16px;">Loading more letters...</p>
  </div>
  
  <!-- End of feed indicator -->
  <div id="end-of-feed" style="display: none; text-align: center; padding: 40px;">
    <p style="color: var(--muted); font-style: italic;">âœ¨ You've reached the end. Time to write your own letter.</p>
  </div>
</section>

<style>
.loading-spinner {
  border: 3px solid #f3f3f3;
  border-top: 3px solid var(--fg);
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin: 0 auto;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>

<script>
let currentPage = 1;
let isLoading = false;
let hasMoreLetters = true;
const isLoggedIn = <%= !!user %>;

function updateReadingStatus(letterId, status) {
  fetch(`/letters/${letterId}/status`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': '<%= csrfToken %>'
    },
    body: JSON.stringify({ status })
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      // Reload to update UI
      window.location.reload();
    } else {
      alert('Failed to update reading status');
    }
  })
  .catch(err => {
    console.error('Error:', err);
    alert('Failed to update reading status');
  });
}

function createLetterHTML(letter) {
  const date = new Date(letter.publish_at).toLocaleDateString('en-US', { 
    month: 'short', 
    day: 'numeric', 
    year: 'numeric' 
  });
  
  const excerpt = letter.body.slice(0, 260) + (letter.body.length > 260 ? 'â€¦' : '');
  const bio = letter.bio ? (letter.bio.slice(0, 100) + (letter.bio.length > 100 ? 'â€¦' : '')) : '';
  
  let actionsHTML = '';
  if (isLoggedIn) {
    let readingButtons = '';
    if (letter.reading_status === 'read') {
      readingButtons = `
        <button class="reading-btn read completed" disabled>
          <span class="icon">âœ“</span> Read
        </button>`;
    } else if (letter.reading_status === 'skip') {
      readingButtons = `
        <button class="reading-btn skip completed" disabled>
          <span class="icon">â†’</span> Skipped
        </button>`;
    } else if (letter.reading_status === 'later') {
      readingButtons = `
        <button class="reading-btn later active" onclick="updateReadingStatus(${letter.id}, 'remove')">
          <span class="icon">ðŸ”–</span> Saved
        </button>`;
    } else {
      readingButtons = `
        <button class="reading-btn read" onclick="window.location.href='/letters/${letter.id}'">
          <span class="icon">ðŸ“–</span> Read
        </button>
        <button class="reading-btn skip" onclick="updateReadingStatus(${letter.id}, 'skip')">
          <span class="icon">â†’</span> Skip
        </button>
        <button class="reading-btn later" onclick="updateReadingStatus(${letter.id}, 'later')">
          <span class="icon">ðŸ”–</span> Later
        </button>`;
    }
    
    const resonateButton = letter.did_resonate ? 
      `<form action="/letters/${letter.id}/unresonate" method="post"><input type="hidden" name="_csrf" value="${letter.csrfToken}" /><button class="btn resonate-btn active">Resonated</button></form>` :
      `<form action="/letters/${letter.id}/resonate" method="post"><input type="hidden" name="_csrf" value="${letter.csrfToken}" /><button class="btn resonate-btn">Resonate</button></form>`;
    
    actionsHTML = `
      <div class="actions">
        <div class="reading-actions">${readingButtons}</div>
        <div class="resonate-action">${resonateButton}</div>
      </div>`;
  }
  
  const avatarHTML = letter.avatar_url ? 
    `<img src="${letter.avatar_url}" alt="${letter.handle}" onerror="this.style.display='none'; this.parentElement.innerHTML='<span style=\\"font-size:16px\\">ðŸ‘¤</span>';">` :
    `<span style="font-size: 16px;">ðŸ‘¤</span>`;
  
  return `
    <article class="letter">
      <h2><a href="/letters/${letter.id}">${letter.title}</a></h2>
      <div class="meta">${date}</div>
      <p>${excerpt}</p>
      
      <div class="feed-author">
        <div class="feed-author-avatar">${avatarHTML}</div>
        <div class="feed-author-info">
          <div class="feed-author-name">@${letter.handle}</div>
          ${bio ? `<div class="feed-author-bio">${bio}</div>` : ''}
        </div>
      </div>
      
      ${actionsHTML}
    </article>
  `;
}

async function loadMoreLetters() {
  if (isLoading || !hasMoreLetters) return;
  
  isLoading = true;
  document.getElementById('loading-indicator').style.display = 'block';
  
  try {
    const response = await fetch(`/api/letters?page=${currentPage + 1}`);
    const data = await response.json();
    
    if (data.letters && data.letters.length > 0) {
      const feedContainer = document.querySelector('.feed');
      const loadingIndicator = document.getElementById('loading-indicator');
      
      data.letters.forEach(letter => {
        const letterHTML = createLetterHTML(letter);
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = letterHTML;
        feedContainer.insertBefore(tempDiv.firstElementChild, loadingIndicator);
      });
      
      currentPage++;
      hasMoreLetters = data.hasMore;
      
      if (!hasMoreLetters) {
        document.getElementById('end-of-feed').style.display = 'block';
      }
    } else {
      hasMoreLetters = false;
      document.getElementById('end-of-feed').style.display = 'block';
    }
  } catch (error) {
    console.error('Error loading more letters:', error);
  } finally {
    isLoading = false;
    document.getElementById('loading-indicator').style.display = 'none';
  }
}

// Infinite scroll detection
function handleScroll() {
  const scrollPosition = window.innerHeight + window.scrollY;
  const documentHeight = document.documentElement.offsetHeight;
  
  // Load more when user is 300px from the bottom
  if (scrollPosition >= documentHeight - 300) {
    loadMoreLetters();
  }
}

// Debounce scroll events for performance
let scrollTimeout;
window.addEventListener('scroll', () => {
  if (scrollTimeout) {
    clearTimeout(scrollTimeout);
  }
  scrollTimeout = setTimeout(handleScroll, 100);
});

// Initial check in case the page is already at the bottom
setTimeout(handleScroll, 500);
</script>


