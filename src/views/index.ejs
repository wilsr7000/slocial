<section class="hero">
  <h1>Slow letters, lasting resonance</h1>
  <p>Write slow, read slow. Letters steep for 12 hours. No rush, no noise.</p>
  <div class="hero-ctas">
    <% if (user) { %>
      <a class="btn btn-primary" href="/compose">Compose a letter</a>
    <% } else { %>
      <a class="btn btn-primary" href="/signup">Create account</a>
      <a class="btn btn-ghost" href="/login">Sign in</a>
    <% } %>
  </div>
</section>

<section class="features container">
  <div class="feature">
    <h3>12-hour steep</h3>
    <p>Space to reflect. Letters publish after a gentle pause.</p>
  </div>
  <div class="feature">
    <h3>Meaningful connections</h3>
    <p>Quality over quantity. Deep thoughts, genuine exchanges.</p>
  </div>
  <div class="feature">
    <h3>No scores</h3>
    <p>Resonate quietly. No public counters or popularity contests.</p>
  </div>
  <div class="feature">
    <h3>Thoughtful replies</h3>
    <p>One response per reader per letter keeps threads calm.</p>
  </div>
</section>

<section class="feed">
  <h2 class="section-title">
    Latest letters
    <% if (typeof filterTag !== 'undefined' && filterTag) { %>
      <span style="font-weight: normal; font-size: 0.8em; margin-left: 1rem;">
        Filtered by: <span style="color: var(--primary-color)">#<%= filterTag.name %></span>
        <a href="/" style="margin-left: 0.5rem; color: var(--muted); text-decoration: none;">‚úï Clear</a>
      </span>
    <% } %>
  </h2>
  <% if (letters.length === 0) { %>
    <div class="empty">
      <% if (typeof filterTag !== 'undefined' && filterTag) { %>
        <p>No letters found with tag "<%= filterTag.name %>"</p>
        <p style="margin-top: 1rem; color: var(--muted);">
          This tag might not have any letters yet, or you might not have access to this tag.
        </p>
        <a href="/" class="btn btn-primary" style="margin-top: 1rem;">
          View All Letters
        </a>
      <% } else { %>
        <p>No letters visible to you.</p>
        <p style="margin-top: 1rem; color: var(--muted);">
          Letters are organized by tags. To see content, you need access to at least one tag.
        </p>
        <a href="/tags" class="btn btn-primary" style="margin-top: 1rem;">
          üè∑Ô∏è Explore Ideas & Request Access
        </a>
      <% } %>
    </div>
  <% } %>
  <% letters.forEach(letter => { %>
    <article class="letter <%= letter.reading_status === 'later' ? 'letter-collapsed' : '' %>" data-letter-id="<%= letter.id %>">
      <% if (letter.reading_status === 'later') { %>
        <!-- Collapsed view for saved letters -->
        <div class="letter-saved-header">
          <div class="saved-indicator">
            <span class="hourglass-icon">‚è≥</span>
            <span class="saved-label">Saved for later</span>
          </div>
          <h3 class="saved-title">
            <a href="/letters/<%= letter.id %>"><%= letter.title %></a>
          </h3>
          <div class="saved-meta">
            <span class="author-name">@<%= letter.handle %></span>
            <span class="separator">‚Ä¢</span>
            <span class="date"><%= new Date(letter.publish_at).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) %></span>
            <% if (letter.tags && letter.tags.length > 0) { %>
              <span class="separator">‚Ä¢</span>
              <% letter.tags.forEach((tag, index) => { %>
                <a href="/tags?filter=<%= encodeURIComponent(tag.name) %>" class="letter-tag" style="font-size: 0.85em;">
                  #<%= tag.name %>
                </a>
                <% if (index < letter.tags.length - 1) { %>
                  <span style="color: var(--muted); margin: 0 0.25rem;">¬∑</span>
                <% } %>
              <% }) %>
            <% } %>
            <button class="expand-btn" onclick="toggleLetterExpand(<%= letter.id %>)">
              <span class="expand-icon">‚ñº</span> Expand
            </button>
          </div>
        </div>
        
        <!-- Hidden full content (can be expanded) -->
        <div class="letter-full-content" style="display: none;">
          <p><%- autoLink(letter.body.slice(0, 260)) %><% if (letter.body.length > 260) { %>‚Ä¶<% } %></p>
          
          <!-- Author section -->
          <div class="feed-author">
      <% } else { %>
        <!-- Normal view for other letters -->
        <h2>
          <a href="/letters/<%= letter.id %>"><%= letter.title %></a>
          <% if (letter.format && letter.format !== 'standard') { %>
            <span class="format-badge format-<%= letter.format %>"><%= letter.format %></span>
          <% } %>
        </h2>
        <div class="meta">
          <%= new Date(letter.publish_at).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %>
          <% if (letter.tags && letter.tags.length > 0) { %>
            <span class="letter-tags">
              <% letter.tags.forEach((tag, index) => { %>
                <a href="/tags?filter=<%= encodeURIComponent(tag.name) %>" class="letter-tag">
                  #<%= tag.name %>
                </a>
                <% if (index < letter.tags.length - 1) { %>
                  <span style="color: var(--muted); margin: 0 0.25rem;">¬∑</span>
                <% } %>
              <% }) %>
            </span>
          <% } %>
        </div>
        <p><%- autoLink(letter.body.slice(0, 260)) %><% if (letter.body.length > 260) { %>‚Ä¶<% } %></p>
        
        <!-- Author section -->
        <div class="feed-author">
      <% } %>
        <div class="feed-author-avatar <%= letter.is_slocialite === 0 ? 'author-avatar' : '' %>">
          <% if (letter.avatar_url) { %>
            <img src="<%= letter.avatar_url %>" alt="<%= letter.handle %>" onerror="this.style.display='none'; this.parentElement.innerHTML='<span style=\"font-size:16px\">üë§</span>';">
          <% } else { %>
            <span style="font-size: 16px;">üë§</span>
          <% } %>
        </div>
        <div class="feed-author-info">
          <div class="feed-author-name">
            @<%= letter.handle %>
            <% if (letter.is_slocialite === 0) { %>
              <span class="author-badge" title="Verified Author">‚ú®</span>
            <% } %>
          </div>
          <% if (letter.bio) { %>
            <div class="feed-author-bio"><%= letter.bio.slice(0, 100) %><% if (letter.bio.length > 100) { %>‚Ä¶<% } %></div>
          <% } %>
        </div>
      </div>
      <% if (letter.reading_status === 'later') { %>
        </div>
      <% } %>
      
      <div class="actions <%= letter.reading_status === 'later' ? 'saved-actions' : '' %>">
        <% if (user) { %>
          <div class="reading-actions">
            <% if (letter.reading_status === 'read') { %>
              <button class="reading-btn read completed" disabled>
                <span class="icon">‚úì</span> Read
              </button>
            <% } else if (letter.reading_status === 'skip') { %>
              <button class="reading-btn skip completed" disabled>
                <span class="icon">‚Üí</span> Skipped
              </button>
            <% } else if (letter.reading_status === 'later') { %>
              <button class="reading-btn later active" onclick="updateReadingStatus(<%= letter.id %>, 'remove')">
                <span class="icon">üîñ</span> Saved
              </button>
            <% } else { %>
              <button class="reading-btn read" onclick="window.location.href='/letters/<%= letter.id %>'">
                <span class="icon">üìñ</span> Read
              </button>
              <button class="reading-btn skip" onclick="updateReadingStatus(<%= letter.id %>, 'skip')">
                <span class="icon">‚Üí</span> Skip
              </button>
              <button class="reading-btn later" onclick="updateReadingStatus(<%= letter.id %>, 'later')">
                <span class="icon">üîñ</span> Later
              </button>
            <% } %>
          </div>
          
          <div class="resonate-action">
            <% if (letter.did_resonate) { %>
              <form action="/letters/<%= letter.id %>/unresonate" method="post"><input type="hidden" name="_csrf" value="<%= csrfToken %>" /><button class="btn resonate-btn active">Resonated</button></form>
            <% } else { %>
              <form action="/letters/<%= letter.id %>/resonate" method="post"><input type="hidden" name="_csrf" value="<%= csrfToken %>" /><button class="btn resonate-btn">Resonate</button></form>
            <% } %>
          </div>
        <% } %>
      </div>
    </article>
  <% }) %>

  <!-- Loading indicator -->
  <div id="loading-indicator" style="display: none; text-align: center; padding: 40px;">
    <div class="loading-spinner"></div>
    <p style="color: var(--muted); margin-top: 16px;">Loading more letters...</p>
  </div>
  
  <!-- End of feed indicator -->
  <div id="end-of-feed" style="display: none; text-align: center; padding: 40px;">
    <p style="color: var(--muted); font-style: italic;">‚ú® You've reached the end. Time to write your own letter.</p>
  </div>
</section>

<style>
.loading-spinner {
  border: 3px solid #f3f3f3;
  border-top: 3px solid var(--fg);
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin: 0 auto;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.letter-tags {
  display: inline-flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-left: 1rem;
}

.letter-tag {
  color: var(--muted);
  font-size: 0.9em;
  text-decoration: none;
  transition: color 0.2s ease;
}

.letter-tag:hover {
  color: var(--fg);
}
</style>

<script>
let currentPage = 1;
let isLoading = false;
let hasMoreLetters = true;
const isLoggedIn = <%= !!user %>;

// Auto-link URLs in text
function autoLink(text) {
  // Regex to match URLs
  const urlRegex = /(https?:\/\/[^\s<]+)/g;
  
  // Replace URLs with clickable links
  return text.replace(urlRegex, function(url) {
    // Truncate display text if URL is too long
    let displayUrl = url;
    if (url.length > 30) {
      displayUrl = url.substring(0, 27) + '...';
    }
    return `<a href="${url}" target="_blank" rel="noopener noreferrer" class="auto-link">${displayUrl}</a>`;
  });
}

// Escape HTML but preserve links
function escapeHtmlButPreserveLinks(text) {
  // First escape HTML entities
  const div = document.createElement('div');
  div.textContent = text;
  const escaped = div.innerHTML;
  
  // Then auto-link URLs
  return autoLink(escaped);
}

function toggleLetterExpand(letterId) {
  const article = document.querySelector(`article[data-letter-id="${letterId}"]`);
  const fullContent = article.querySelector('.letter-full-content');
  const expandBtn = article.querySelector('.expand-btn');
  const expandIcon = expandBtn.querySelector('.expand-icon');
  
  if (fullContent.style.display === 'none') {
    fullContent.style.display = 'block';
    expandIcon.textContent = '‚ñ≤';
    expandBtn.innerHTML = '<span class="expand-icon">‚ñ≤</span> Collapse';
    article.classList.remove('letter-collapsed');
  } else {
    fullContent.style.display = 'none';
    expandIcon.textContent = '‚ñº';
    expandBtn.innerHTML = '<span class="expand-icon">‚ñº</span> Expand';
    article.classList.add('letter-collapsed');
  }
}

function updateReadingStatus(letterId, status) {
  fetch(`/letters/${letterId}/status`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': '<%= csrfToken %>'
    },
    body: JSON.stringify({ status })
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      // Reload to update UI
      window.location.reload();
    } else {
      alert('Failed to update reading status');
    }
  })
  .catch(err => {
    console.error('Error:', err);
    alert('Failed to update reading status');
  });
}

function createLetterHTML(letter) {
  const date = new Date(letter.publish_at).toLocaleDateString('en-US', { 
    month: 'short', 
    day: 'numeric', 
    year: 'numeric' 
  });
  
  const excerpt = escapeHtmlButPreserveLinks(letter.body.slice(0, 260)) + (letter.body.length > 260 ? '‚Ä¶' : '');
  const bio = letter.bio ? (letter.bio.slice(0, 100) + (letter.bio.length > 100 ? '‚Ä¶' : '')) : '';
  
  let actionsHTML = '';
  if (isLoggedIn) {
    let readingButtons = '';
    if (letter.reading_status === 'read') {
      readingButtons = `
        <button class="reading-btn read completed" disabled>
          <span class="icon">‚úì</span> Read
        </button>`;
    } else if (letter.reading_status === 'skip') {
      readingButtons = `
        <button class="reading-btn skip completed" disabled>
          <span class="icon">‚Üí</span> Skipped
        </button>`;
    } else if (letter.reading_status === 'later') {
      readingButtons = `
        <button class="reading-btn later active" onclick="updateReadingStatus(${letter.id}, 'remove')">
          <span class="icon">üîñ</span> Saved
        </button>`;
    } else {
      readingButtons = `
        <button class="reading-btn read" onclick="window.location.href='/letters/${letter.id}'">
          <span class="icon">üìñ</span> Read
        </button>
        <button class="reading-btn skip" onclick="updateReadingStatus(${letter.id}, 'skip')">
          <span class="icon">‚Üí</span> Skip
        </button>
        <button class="reading-btn later" onclick="updateReadingStatus(${letter.id}, 'later')">
          <span class="icon">üîñ</span> Later
        </button>`;
    }
    
    const resonateButton = letter.did_resonate ? 
      `<form action="/letters/${letter.id}/unresonate" method="post"><input type="hidden" name="_csrf" value="${letter.csrfToken}" /><button class="btn resonate-btn active">Resonated</button></form>` :
      `<form action="/letters/${letter.id}/resonate" method="post"><input type="hidden" name="_csrf" value="${letter.csrfToken}" /><button class="btn resonate-btn">Resonate</button></form>`;
    
    actionsHTML = `
      <div class="actions">
        <div class="reading-actions">${readingButtons}</div>
        <div class="resonate-action">${resonateButton}</div>
      </div>`;
  }
  
  const avatarHTML = letter.avatar_url ? 
    `<img src="${letter.avatar_url}" alt="${letter.handle}" onerror="this.style.display='none'; this.parentElement.innerHTML='<span style=\\"font-size:16px\\">üë§</span>';">` :
    `<span style="font-size: 16px;">üë§</span>`;
  
  // Add tags HTML
  let tagsHTML = '';
  if (letter.tags && letter.tags.length > 0) {
    const tagLinks = letter.tags.map(tag => 
      `<a href="/tags?filter=${encodeURIComponent(tag.name)}" class="letter-tag">#${tag.name}</a>`
    ).join('<span style="color: var(--muted); margin: 0 0.25rem;">¬∑</span>');
    tagsHTML = `<span class="letter-tags">${tagLinks}</span>`;
  }
  
  return `
    <article class="letter">
      <h2><a href="/letters/${letter.id}">${letter.title}</a></h2>
      <div class="meta">${date}${tagsHTML ? ' ' + tagsHTML : ''}</div>
      <p>${excerpt}</p>
      
      <div class="feed-author">
        <div class="feed-author-avatar">${avatarHTML}</div>
        <div class="feed-author-info">
          <div class="feed-author-name">@${letter.handle}</div>
          ${bio ? `<div class="feed-author-bio">${bio}</div>` : ''}
        </div>
      </div>
      
      ${actionsHTML}
    </article>
  `;
}

async function loadMoreLetters() {
  if (isLoading || !hasMoreLetters) return;
  
  isLoading = true;
  document.getElementById('loading-indicator').style.display = 'block';
  
  try {
    // Preserve filter parameter if present
    const urlParams = new URLSearchParams(window.location.search);
    const filterParam = urlParams.get('filter');
    const apiUrl = filterParam 
      ? `/api/letters?page=${currentPage + 1}&filter=${encodeURIComponent(filterParam)}`
      : `/api/letters?page=${currentPage + 1}`;
    
    const response = await fetch(apiUrl);
    const data = await response.json();
    
    if (data.letters && data.letters.length > 0) {
      const feedContainer = document.querySelector('.feed');
      const loadingIndicator = document.getElementById('loading-indicator');
      
      data.letters.forEach(letter => {
        const letterHTML = createLetterHTML(letter);
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = letterHTML;
        feedContainer.insertBefore(tempDiv.firstElementChild, loadingIndicator);
      });
      
      currentPage++;
      hasMoreLetters = data.hasMore;
      
      if (!hasMoreLetters) {
        document.getElementById('end-of-feed').style.display = 'block';
      }
    } else {
      hasMoreLetters = false;
      document.getElementById('end-of-feed').style.display = 'block';
    }
  } catch (error) {
    console.error('Error loading more letters:', error);
  } finally {
    isLoading = false;
    document.getElementById('loading-indicator').style.display = 'none';
  }
}

// Infinite scroll detection
function handleScroll() {
  const scrollPosition = window.innerHeight + window.scrollY;
  const documentHeight = document.documentElement.offsetHeight;
  
  // Load more when user is 300px from the bottom
  if (scrollPosition >= documentHeight - 300) {
    loadMoreLetters();
  }
}

// Debounce scroll events for performance
let scrollTimeout;
window.addEventListener('scroll', () => {
  if (scrollTimeout) {
    clearTimeout(scrollTimeout);
  }
  scrollTimeout = setTimeout(handleScroll, 100);
});

// Initial check in case the page is already at the bottom
setTimeout(handleScroll, 500);
</script>


