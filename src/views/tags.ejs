<style>
  .tags-container {
    max-width: 1400px;
    margin: 2rem auto;
    padding: 0 1rem;
  }
  
  .tags-header {
    text-align: center;
    margin-bottom: 3rem;
    padding: 2rem 0;
  }
  
  .tags-header h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    font-weight: 700;
    color: var(--fg, #000);
  }
  
  .tags-header p {
    color: var(--muted, #666);
    margin-bottom: 1.5rem;
    font-size: 1.125rem;
  }
  
  .tags-header .btn {
    background: var(--fg, #000);
    color: var(--bg, #fff);
    border: 2px solid var(--fg, #000);
    font-weight: 600;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    transition: all 0.2s;
  }
  
  .tags-header .btn:hover {
    background: transparent;
    color: var(--fg, #000);
  }
  
  .alert {
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 4px;
  }
  
  .alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }
  
  .alert-error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }
  
  .tags-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
  }
  
  .tag-card {
    background: var(--card, white);
    border: 1px solid var(--border, #e0e0e0);
    border-radius: 16px;
    overflow: hidden;
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    position: relative;
  }
  
  .tag-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
  }
  
  [data-theme="dark"] .tag-card:hover {
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.4);
  }
  
  .tag-image-container {
    width: 100%;
    height: 180px;
    background: var(--hover-bg, #f8f8f8);
    position: relative;
    overflow: hidden;
    border-bottom: 1px solid var(--border, #e0e0e0);
  }
  
  .tag-image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .tag-image-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 3rem;
    font-weight: 700;
    color: var(--muted, #999);
    background: var(--hover-bg, #f8f8f8);
  }
  
  .instant-badge {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: var(--bg, white);
    color: var(--fg, #000);
    border: 2px solid var(--fg, #000);
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    font-size: 0.875rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }
  
  .instant-badge::before {
    content: '⚡';
  }
  
  .tag-card-content {
    padding: 1.5rem;
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  
  .tag-header {
    margin-bottom: 0.75rem;
  }
  
  .tag-name {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--fg, #333);
    margin: 0 0 0.5rem 0;
    line-height: 1.2;
  }
  
  .tag-visibility {
    display: inline-block;
    padding: 0.2rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
  }
  
  .tag-public {
    background-color: transparent;
    color: var(--muted, #666);
    border: 1px solid var(--border, #e0e0e0);
  }
  
  .tag-private {
    background-color: var(--fg, #000);
    color: var(--bg, #fff);
    border: 1px solid var(--fg, #000);
  }
  
  .tag-description {
    color: var(--muted, #666);
    margin-bottom: 1rem;
    line-height: 1.5;
    flex: 1;
    font-size: 0.95rem;
  }
  
  .tag-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.5rem;
    margin-bottom: 1rem;
    padding: 1rem;
    background: var(--hover-bg, #f8f9fa);
    border-radius: 12px;
  }
  
  .tag-stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    gap: 0.25rem;
  }
  
  .tag-stat-value {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--fg, #333);
  }
  
  .tag-stat-label {
    font-size: 0.75rem;
    color: var(--muted, #666);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }
  
  .tag-owners {
    margin-bottom: 1rem;
    font-size: 0.875rem;
  }
  
  .tag-owners-label {
    font-weight: 500;
    margin-bottom: 0.25rem;
  }
  
  .owner-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .owner-badge {
    background-color: #f0f0f0;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
  }
  
  .owner-badge.founder {
    background-color: #ffd700;
    color: #333;
  }
  
  .tag-actions {
    display: flex;
    gap: 0.5rem;
    margin-top: 1rem;
  }
  
  .btn {
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.875rem;
    transition: all 0.2s;
    text-decoration: none;
    display: inline-block;
    text-align: center;
    background: var(--bg, white);
    color: var(--fg, #000);
    border: 1px solid var(--fg, #000);
  }
  
  .btn:hover {
    background: var(--hover-bg, #f5f5f5);
  }
  
  .btn-primary {
    background: var(--fg, #000);
    color: var(--bg, white);
    border: 1px solid var(--fg, #000);
  }
  
  .btn-success {
    background: var(--fg, #000);
    color: var(--bg, white);
    border: 1px solid var(--fg, #000);
  }
  
  .btn-warning {
    background: transparent;
    color: var(--fg, #000);
    border: 2px solid var(--fg, #000);
  }
  
  .btn-danger {
    background: var(--fg, #000);
    color: var(--bg, white);
    border: 1px solid var(--fg, #000);
  }
  
  .btn-secondary {
    background: transparent;
    color: var(--fg, #000);
    border: 1px solid var(--border, #e0e0e0);
  }
  
  .btn-primary:hover,
  .btn-success:hover,
  .btn-danger:hover {
    background: transparent;
    color: var(--fg, #000);
  }
  
  .btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .has-access {
    color: var(--muted, #666);
    font-weight: 500;
  }
  
  .pending-request {
    color: var(--muted, #666);
    font-weight: 500;
  }
  
  .request-form {
    display: none;
    margin-top: 1rem;
    padding: 1rem;
    background-color: #f8f9fa;
    border-radius: 4px;
  }
  
  .request-form.active {
    display: block;
  }
  
  .form-group {
    margin-bottom: 1rem;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 0.25rem;
    font-weight: 500;
  }
  
  .form-group textarea {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    resize: vertical;
    min-height: 80px;
  }
  
  .form-actions {
    display: flex;
    gap: 0.5rem;
  }
</style>

<div class="tags-container">
  <div class="tags-header">
    <h1>Explore Tags</h1>
    <p>Discover curated collections of letters organized by passionate editors</p>
    <% if (user) { %>
      <button class="btn" id="createTagBtn">
        Create New Tag
      </button>
    <% } else { %>
      <div style="margin-top: 1.5rem;">
        <a href="/signup" class="btn">
          Join to Create & Access Tags
        </a>
      </div>
    <% } %>
  </div>
  
  <% if (!user) { %>
    <div style="background: var(--hover-bg, #f5f5f5); padding: 1.25rem; border-radius: 8px; margin-bottom: 2rem; text-align: center; border: 1px solid var(--border, #e0e0e0);">
      <strong style="color: var(--fg, #000); font-size: 1.1rem;">Limited Access as Visitor</strong>
      <p style="color: var(--muted, #666); margin: 0.5rem 0 0 0;">
        You can only view content tagged as "Public". Create an account to explore all tags and request access to exclusive content.
      </p>
    </div>
  <% } %>
  
  <% if (message) { %>
    <div class="alert alert-success" style="margin-bottom: 2rem;"><%= message %></div>
  <% } %>
  
  <% if (error) { %>
    <div class="alert alert-error" style="margin-bottom: 2rem;"><%= error %></div>
  <% } %>
  
  <div class="tags-grid">
    <% tags.forEach((tag, index) => { %>
      <div class="tag-card" style="--tag-index: <%= index %>;">
        <!-- Image Section -->
        <div class="tag-image-container">
          <% if (tag.image_url) { %>
            <img src="<%= tag.image_url %>" alt="<%= tag.name %>" onerror="this.style.display='none'; this.parentElement.innerHTML='<div class=&quot;tag-image-placeholder&quot;><%= tag.name.charAt(0).toUpperCase() %></div>'" />
          <% } else { %>
            <div class="tag-image-placeholder">
              <%= tag.name.charAt(0).toUpperCase() %>
            </div>
          <% } %>
          <% if (tag.auto_approve) { %>
            <div class="instant-badge">Instant Access</div>
          <% } %>
        </div>
        
        <!-- Content Section -->
        <div class="tag-card-content">
          <div class="tag-header">
            <span class="tag-visibility <%= tag.is_public ? 'tag-public' : 'tag-private' %>">
              <%= tag.is_public ? 'Public' : 'Private' %>
            </span>
            <h2 class="tag-name">#<%= tag.name %></h2>
          </div>
          
          <p class="tag-description">
            <%= tag.short_description || tag.description || 'No description available' %>
          </p>
          
          <div class="tag-stats">
            <div class="tag-stat">
              <div class="tag-stat-value"><%= tag.letter_count || 0 %></div>
              <div class="tag-stat-label">Letters</div>
            </div>
            <div class="tag-stat">
              <div class="tag-stat-value"><%= tag.owner_count || 0 %></div>
              <div class="tag-stat-label">Editors</div>
            </div>
            <div class="tag-stat">
              <div class="tag-stat-value"><%= tag.usage_count || 0 %></div>
              <div class="tag-stat-label">Uses</div>
            </div>
          </div>
          
          <% if (tag.owners && tag.owners.length > 0) { %>
            <div class="tag-owners">
              <div class="tag-owners-label">Managed by:</div>
              <div class="owner-list">
                <% tag.owners.slice(0, 3).forEach(owner => { %>
                  <span class="owner-badge <%= owner.ownership_type %>">
                    @<%= owner.handle %>
                    <% if (owner.ownership_type === 'founder') { %>
                      👑
                    <% } %>
                  </span>
                <% }) %>
                <% if (tag.owners.length > 3) { %>
                  <span class="owner-badge">+<%= tag.owners.length - 3 %> more</span>
                <% } %>
              </div>
            </div>
          <% } %>
          
          <div class="tag-actions">
            <% if (user) { %>
              <% if (tag.is_owner) { %>
                <a href="/tags/<%= tag.id %>/manage" class="btn btn-warning" style="position: relative;">
                  ⚙️ Manage
                  <% if (tag.pending_request_count > 0) { %>
                    <span style="position: absolute; top: -8px; right: -8px; background: #dc3545; color: white; border-radius: 50%; width: 20px; height: 20px; display: flex; align-items: center; justify-content: center; font-size: 0.75rem; font-weight: bold;">
                      <%= tag.pending_request_count %>
                    </span>
                  <% } %>
                </a>
              <% } else if (tag.has_access) { %>
                <span class="has-access">✅ You have access</span>
              <% } else if (tag.request_status === 'pending') { %>
                <span class="pending-request">⏳ Request pending</span>
                <form action="/tags/<%= tag.id %>/cancel-request" method="POST" style="display: inline;">
                  <button type="submit" class="btn btn-secondary">Cancel</button>
                </form>
              <% } else if (tag.request_status === 'rejected') { %>
                <% if (tag.auto_approve) { %>
                  <button class="btn btn-success request-btn" data-tag-id="<%= tag.id %>" data-instant="true">
                    ⚡ Get Instant Access
                  </button>
                <% } else { %>
                  <button class="btn btn-primary request-btn" data-tag-id="<%= tag.id %>">
                    🔄 Request Again
                  </button>
                <% } %>
              <% } else { %>
                <% if (tag.auto_approve) { %>
                  <button class="btn btn-success request-btn" data-tag-id="<%= tag.id %>" data-instant="true">
                    ⚡ Get Instant Access
                  </button>
                <% } else { %>
                  <button class="btn btn-primary request-btn" data-tag-id="<%= tag.id %>">
                    🔓 Request Access
                  </button>
                <% } %>
              <% } %>
            <% } else { %>
              <a href="/login" class="btn btn-secondary">Login to access</a>
            <% } %>
          </div>
          
          <% if (user && !tag.has_access && tag.request_status !== 'pending') { %>
            <div class="request-form" id="request-form-<%= tag.id %>">
              <form action="/tags/<%= tag.id %>/request-access" method="POST">
                <% if (!tag.auto_approve) { %>
                  <div class="form-group">
                    <label for="message-<%= tag.id %>">Message to tag owners (optional):</label>
                    <textarea 
                      name="message" 
                      id="message-<%= tag.id %>"
                      placeholder="Explain why you'd like access to content with this tag..."
                    ></textarea>
                  </div>
                <% } %>
                <div class="form-actions">
                  <button type="submit" class="btn btn-success">
                    <%= tag.auto_approve ? '⚡ Get Instant Access' : 'Send Request' %>
                  </button>
                  <button type="button" class="btn btn-secondary cancel-request-btn" data-tag-id="<%= tag.id %>">
                    Cancel
                  </button>
                </div>
              </form>
            </div>
          <% } %>
        </div>
      </div>
    <% }) %>
  </div>
</div>

<script>
  // Handle request access button clicks
  document.querySelectorAll('.request-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const tagId = this.dataset.tagId;
      const form = document.getElementById(`request-form-${tagId}`);
      if (form) {
        form.classList.add('active');
        this.style.display = 'none';
      }
    });
  });
  
  // Handle cancel button clicks
  document.querySelectorAll('.cancel-request-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const tagId = this.dataset.tagId;
      const form = document.getElementById(`request-form-${tagId}`);
      const requestBtn = document.querySelector(`.request-btn[data-tag-id="${tagId}"]`);
      if (form) {
        form.classList.remove('active');
      }
      if (requestBtn) {
        requestBtn.style.display = '';
      }
    });
  });
</script>

<!-- Create Tag Modal -->
<% if (user) { %>
<div id="createTagModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h2>✨ Create New Tag</h2>
      <button class="close-modal" onclick="closeModal()">&times;</button>
    </div>
    
    <form id="createTagForm" action="/tags/create?_csrf=<%= csrfToken %>" method="POST" enctype="multipart/form-data">
      
      <div class="modal-body">
        <div class="form-group">
          <label for="tagName">Tag Name *</label>
          <input 
            type="text" 
            id="tagName" 
            name="name" 
            required 
            placeholder="e.g., Technology, Philosophy, Personal Stories"
            maxlength="50"
          />
          <div class="char-count" id="nameCount">0 / 50</div>
        </div>
        
        <div class="form-group">
          <label for="shortDescription">Short Description *</label>
          <input 
            type="text" 
            id="shortDescription" 
            name="short_description" 
            required 
            placeholder="A brief one-line description (shown in tag cards)"
            maxlength="100"
          />
          <div class="char-count" id="shortCount">0 / 100</div>
        </div>
        
        <div class="form-group">
          <label for="longDescription">Long Description</label>
          <textarea 
            id="longDescription" 
            name="long_description" 
            placeholder="Detailed description of what content belongs in this tag..."
            maxlength="500"
          ></textarea>
          <div class="char-count" id="longCount">0 / 500</div>
        </div>
        
        <div class="form-group">
          <label>Tag Image (optional)</label>
          
          <div class="image-upload-options">
            <div class="upload-tab-buttons">
              <button type="button" class="upload-tab active" data-tab="upload">Upload Image</button>
              <button type="button" class="upload-tab" data-tab="url">Use URL</button>
            </div>
            
            <div class="upload-tab-content" id="upload-tab">
              <input 
                type="file" 
                id="imageFile" 
                name="image_file" 
                accept="image/jpeg,image/jpg,image/png,image/gif,image/webp"
                onchange="previewImage(this)"
              />
              <div class="help-text">Upload an image (max 5MB, square images work best)</div>
              <div id="imagePreview" class="image-preview"></div>
            </div>
            
            <div class="upload-tab-content" id="url-tab" style="display: none;">
              <input 
                type="url" 
                id="imageUrl" 
                name="image_url" 
                placeholder="https://example.com/image.jpg"
                onchange="previewImageUrl(this)"
              />
              <div class="help-text">Enter an image URL (square images work best)</div>
              <div id="urlImagePreview" class="image-preview"></div>
            </div>
          </div>
        </div>
        
        <div class="form-group">
          <label>
            <input type="checkbox" name="is_public" value="1" checked />
            Make this tag public (visible to all users)
          </label>
        </div>
        
        <div class="form-group">
          <label>
            <input type="checkbox" name="auto_approve" value="1" />
            ⚡ Enable instant access (auto-approve all requests)
          </label>
          <div class="help-text" style="margin-left: 1.5rem; margin-top: 0.25rem;">
            Allow users to get immediate access without waiting for your approval
          </div>
        </div>
        
        <div class="editors-info">
          <h4>Tag Ownership</h4>
          <p>
            <strong>Creator:</strong> @<%= user.handle %> (you)<br>
            As the creator, you will be the <strong>founder</strong> and the only person who can edit this tag's details. 
            You can add co-owners later who will help manage access requests, but only you will be able to modify the tag itself.
          </p>
        </div>
      </div>
      
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
        <button type="submit" class="btn btn-primary">Create Tag</button>
      </div>
    </form>
  </div>
</div>

<style>
  /* Additional modal styles */
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    animation: fadeIn 0.3s;
  }
  
  .modal.active {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  .modal-content {
    background-color: var(--card, white);
    color: var(--fg, #333);
    padding: 2rem;
    border-radius: 12px;
    width: 90%;
    max-width: 600px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
    animation: slideUp 0.3s;
    border: 1px solid var(--border, #e0e0e0);
  }
  
  /* Custom scrollbar styling */
  .modal-content::-webkit-scrollbar {
    width: 8px;
  }
  
  .modal-content::-webkit-scrollbar-track {
    background: var(--hover-bg, #f1f1f1);
    border-radius: 4px;
  }
  
  .modal-content::-webkit-scrollbar-thumb {
    background: var(--muted, #888);
    border-radius: 4px;
  }
  
  .modal-content::-webkit-scrollbar-thumb:hover {
    background: var(--fg, #555);
  }
  
  @keyframes slideUp {
    from {
      transform: translateY(50px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  
  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid var(--border, #f0f0f0);
  }
  
  .modal-header h2 {
    margin: 0;
    color: var(--fg, #333);
    font-size: 1.75rem;
  }
  
  .close-modal {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--muted, #999);
    transition: all 0.2s;
    padding: 0;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
  }
  
  .close-modal:hover {
    color: var(--fg, #333);
    background-color: var(--hover-bg, #f0f0f0);
  }
  
  .modal-body {
    margin-bottom: 1.5rem;
  }
  
  .form-group {
    margin-bottom: 1.5rem;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: var(--fg, #333);
  }
  
  .form-group input[type="text"],
  .form-group input[type="url"],
  .form-group textarea {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid var(--border, #e0e0e0);
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.2s;
    font-family: inherit;
    background-color: var(--bg, white);
    color: var(--fg, #333);
  }
  
  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--primary-color, #6366f1);
    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
  }
  
  .form-group textarea {
    resize: vertical;
    min-height: 80px;
  }
  
  .form-group .help-text {
    font-size: 0.875rem;
    color: var(--muted, #666);
    margin-top: 0.25rem;
  }
  
  .char-count {
    text-align: right;
    font-size: 0.875rem;
    color: var(--muted, #999);
    margin-top: 0.25rem;
  }
  
  .char-count.warning {
    color: #ff9800;
  }
  
  .char-count.error {
    color: #f44336;
  }
  
  .modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    padding-top: 1rem;
    border-top: 2px solid var(--border, #f0f0f0);
  }
  
  .editors-info {
    background: var(--hover-bg, #f8f9fa);
    padding: 1rem;
    border-radius: 8px;
    margin-top: 1rem;
    border: 1px solid var(--border, transparent);
  }
  
  .editors-info h4 {
    margin: 0 0 0.5rem 0;
    color: var(--fg, #495057);
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }
  
  .editors-info p {
    margin: 0;
    color: var(--muted, #6c757d);
    font-size: 0.875rem;
    line-height: 1.5;
  }
  
  /* Dark mode specific adjustments */
  [data-theme="dark"] .modal {
    background-color: rgba(0, 0, 0, 0.7);
  }
  
  [data-theme="dark"] .modal-content {
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
  }
  
  [data-theme="dark"] .form-group input:focus,
  [data-theme="dark"] .form-group textarea:focus {
    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
  }
  
  /* Image upload styles */
  .image-upload-options {
    margin-top: 0.5rem;
  }
  
  .upload-tab-buttons {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .upload-tab {
    flex: 1;
    padding: 0.5rem 1rem;
    background: var(--hover-bg, #f0f0f0);
    border: 2px solid var(--border, #e0e0e0);
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s;
    color: var(--fg, #333);
    font-weight: 500;
  }
  
  .upload-tab:hover {
    background: var(--border, #e0e0e0);
  }
  
  .upload-tab.active {
    background: var(--fg, #000);
    color: var(--bg, white);
    border-color: var(--fg, #000);
  }
  
  .upload-tab-content {
    padding: 1rem;
    background: var(--hover-bg, #f8f9fa);
    border-radius: 8px;
    border: 1px solid var(--border, #e0e0e0);
  }
  
  input[type="file"] {
    width: 100%;
    padding: 0.75rem;
    border: 2px dashed var(--border, #e0e0e0);
    border-radius: 8px;
    background: var(--bg, white);
    color: var(--fg, #333);
    cursor: pointer;
  }
  
  input[type="file"]:hover {
    border-color: var(--fg, #000);
  }
  
  .image-preview {
    margin-top: 1rem;
    text-align: center;
  }
  
  .image-preview img {
    max-width: 200px;
    max-height: 200px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
  
  .image-preview .remove-image {
    display: inline-block;
    margin-top: 0.5rem;
    padding: 0.25rem 0.75rem;
    background: var(--fg, #000);
    color: var(--bg, white);
    border: 1px solid var(--fg, #000);
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.875rem;
  }
  
  .image-preview .remove-image:hover {
    background: transparent;
    color: var(--fg, #000);
  }
</style>

<script>
  // Modal functionality
  const modal = document.getElementById('createTagModal');
  const createBtn = document.getElementById('createTagBtn');
  
  if (createBtn) {
    createBtn.addEventListener('click', () => {
      modal.classList.add('active');
    });
  }
  
  function closeModal() {
    modal.classList.remove('active');
    document.getElementById('createTagForm').reset();
    updateCharCounts();
  }
  
  // Close modal when clicking outside
  window.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });
  
  // Character count functionality
  function updateCharCount(inputId, countId, maxLength) {
    const input = document.getElementById(inputId);
    const counter = document.getElementById(countId);
    
    if (input && counter) {
      const updateCount = () => {
        const length = input.value.length;
        counter.textContent = `${length} / ${maxLength}`;
        
        // Update color based on length
        counter.classList.remove('warning', 'error');
        if (length > maxLength * 0.9) {
          counter.classList.add('error');
        } else if (length > maxLength * 0.7) {
          counter.classList.add('warning');
        }
      };
      
      input.addEventListener('input', updateCount);
      updateCount();
    }
  }
  
  function updateCharCounts() {
    updateCharCount('tagName', 'nameCount', 50);
    updateCharCount('shortDescription', 'shortCount', 100);
    updateCharCount('longDescription', 'longCount', 500);
  }
  
  // Initialize character counts when page loads
  if (document.getElementById('createTagModal')) {
    updateCharCounts();
  }
  
  // Tab switching functionality
  document.querySelectorAll('.upload-tab').forEach(tab => {
    tab.addEventListener('click', function() {
      const targetTab = this.dataset.tab;
      
      // Update active tab
      document.querySelectorAll('.upload-tab').forEach(t => t.classList.remove('active'));
      this.classList.add('active');
      
      // Show/hide content
      if (targetTab === 'upload') {
        document.getElementById('upload-tab').style.display = 'block';
        document.getElementById('url-tab').style.display = 'none';
        // Clear URL input when switching to upload
        document.getElementById('imageUrl').value = '';
        document.getElementById('urlImagePreview').innerHTML = '';
      } else {
        document.getElementById('upload-tab').style.display = 'none';
        document.getElementById('url-tab').style.display = 'block';
        // Clear file input when switching to URL
        document.getElementById('imageFile').value = '';
        document.getElementById('imagePreview').innerHTML = '';
      }
    });
  });
  
  // Image preview for file upload
  function previewImage(input) {
    const preview = document.getElementById('imagePreview');
    preview.innerHTML = '';
    
    if (input.files && input.files[0]) {
      const file = input.files[0];
      
      // Check file size
      if (file.size > 5 * 1024 * 1024) {
        alert('File size must be less than 5MB');
        input.value = '';
        return;
      }
      
      const reader = new FileReader();
      reader.onload = function(e) {
        preview.innerHTML = `
          <img src="${e.target.result}" alt="Preview">
          <br>
          <button type="button" class="remove-image" onclick="clearFileInput()">Remove Image</button>
        `;
      };
      reader.readAsDataURL(file);
    }
  }
  
  // Image preview for URL
  function previewImageUrl(input) {
    const preview = document.getElementById('urlImagePreview');
    preview.innerHTML = '';
    
    if (input.value) {
      preview.innerHTML = `
        <img src="${input.value}" alt="Preview" onload="this.style.display='block'" onerror="this.style.display='none'; alert('Failed to load image from URL');">
        <br>
        <button type="button" class="remove-image" onclick="clearUrlInput()">Remove Image</button>
      `;
    }
  }
  
  // Clear file input
  function clearFileInput() {
    document.getElementById('imageFile').value = '';
    document.getElementById('imagePreview').innerHTML = '';
  }
  
  // Clear URL input
  function clearUrlInput() {
    document.getElementById('imageUrl').value = '';
    document.getElementById('urlImagePreview').innerHTML = '';
  }
</script>
<% } %>
