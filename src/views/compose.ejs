<style>
  .editor-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    height: 600px;
    margin: 20px 0;
  }
  
  .editor-pane, .preview-pane {
    border: 1px solid var(--border);
    border-radius: 12px;
    background: var(--card);
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }
  
  .pane-header {
    padding: 12px 16px;
    background: #fafaf8;
    border-bottom: 1px solid var(--border);
    font-weight: 600;
    font-size: 14px;
    color: var(--muted);
  }
  
  .editor-toolbar {
    display: flex;
    gap: 4px;
    padding: 8px;
    background: #fafaf8;
    border-bottom: 1px solid var(--border);
    flex-wrap: wrap;
  }
  
  .toolbar-btn {
    padding: 6px 10px;
    background: white;
    border: 1px solid var(--border);
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.2s;
  }
  
  .toolbar-btn:hover {
    background: var(--fg);
    color: white;
  }
  
  .toolbar-separator {
    width: 1px;
    background: var(--border);
    margin: 0 4px;
  }
  
  #markdown-editor {
    flex: 1;
    padding: 16px;
    border: none;
    resize: none;
    font-family: 'Courier New', monospace;
    font-size: 14px;
    line-height: 1.6;
    background: white;
  }
  
  #markdown-editor:focus {
    outline: none;
  }
  
  .preview-content {
    flex: 1;
    padding: 16px;
    overflow-y: auto;
    font-family: system-ui, -apple-system, sans-serif;
  }
  
  /* Markdown preview styles */
  .preview-content h1 { font-size: 28px; margin: 20px 0 16px 0; }
  .preview-content h2 { font-size: 24px; margin: 18px 0 14px 0; }
  .preview-content h3 { font-size: 20px; margin: 16px 0 12px 0; }
  .preview-content p { margin: 12px 0; line-height: 1.6; }
  .preview-content ul, .preview-content ol { margin: 12px 0; padding-left: 24px; }
  .preview-content li { margin: 6px 0; }
  .preview-content blockquote {
    border-left: 4px solid var(--border);
    padding-left: 16px;
    margin: 16px 0;
    color: var(--muted);
    font-style: italic;
  }
  .preview-content code {
    background: #f5f5f5;
    padding: 2px 6px;
    border-radius: 4px;
    font-family: 'Courier New', monospace;
    font-size: 14px;
  }
  .preview-content pre {
    background: #f5f5f5;
    padding: 12px;
    border-radius: 8px;
    overflow-x: auto;
  }
  .preview-content pre code {
    background: none;
    padding: 0;
  }
  .preview-content a {
    color: var(--accent);
    text-decoration: underline;
  }
  .preview-content hr {
    border: none;
    border-top: 1px solid var(--border);
    margin: 24px 0;
  }
  .preview-content img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
  }
  .preview-content table {
    border-collapse: collapse;
    width: 100%;
    margin: 16px 0;
  }
  .preview-content th, .preview-content td {
    border: 1px solid var(--border);
    padding: 8px 12px;
    text-align: left;
  }
  .preview-content th {
    background: #fafaf8;
    font-weight: 600;
  }
  
  .char-count {
    padding: 8px 16px;
    background: #fafaf8;
    border-top: 1px solid var(--border);
    font-size: 13px;
    color: var(--muted);
  }
  
  @media (max-width: 768px) {
    .editor-container {
      grid-template-columns: 1fr;
      height: auto;
    }
    .editor-pane {
      height: 400px;
    }
    .preview-pane {
      height: 400px;
    }
  }
</style>

<h1>Compose a Letter</h1>
<p class="hint">Write in Markdown. Your letter will publish in 12 hours. You can write one every 24 hours.</p>

<% if (errors && errors.length) { %>
  <ul class="errors">
    <% errors.forEach(e => { %><li><%= e.msg %></li><% }) %>
  </ul>
<% } %>

<form method="post" id="compose-form">
  <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
  
  <label>Title</label>
  <input type="text" name="title" id="title-input" value="<%= values.title || '' %>" maxlength="120" required placeholder="A thoughtful title..." />
  
  <div class="editor-container">
    <div class="editor-pane">
      <div class="pane-header">‚úçÔ∏è Write (Markdown)</div>
      <div class="editor-toolbar">
        <button type="button" class="toolbar-btn" onclick="insertMarkdown('**', '**')">Bold</button>
        <button type="button" class="toolbar-btn" onclick="insertMarkdown('*', '*')">Italic</button>
        <button type="button" class="toolbar-btn" onclick="insertMarkdown('## ', '')">Heading</button>
        <div class="toolbar-separator"></div>
        <button type="button" class="toolbar-btn" onclick="insertMarkdown('> ', '')">Quote</button>
        <button type="button" class="toolbar-btn" onclick="insertMarkdown('`', '`')">Code</button>
        <button type="button" class="toolbar-btn" onclick="insertMarkdown('[', '](url)')">Link</button>
        <button type="button" class="toolbar-btn" onclick="insertImage()">üì∑ Image</button>
        <div class="toolbar-separator"></div>
        <button type="button" class="toolbar-btn" onclick="insertMarkdown('- ', '')">List</button>
        <button type="button" class="toolbar-btn" onclick="insertMarkdown('1. ', '')">Number</button>
        <button type="button" class="toolbar-btn" onclick="insertMarkdown('---\n', '')">Divider</button>
      </div>
      <textarea 
        name="body" 
        id="markdown-editor" 
        maxlength="50000" 
        required 
        placeholder="Write your letter here...

You can use:
- **Bold** and *italic* text
- # Headers
- > Quotes
- `code`
- [Links](url)
- Lists and more..."
      ><%= values.body || '' %></textarea>
      <div class="char-count">
        <span id="char-count">0</span> / 50000 characters
      </div>
    </div>
    
    <div class="preview-pane">
      <div class="pane-header">üëÅ Preview</div>
      <div class="preview-content" id="preview">
        <p style="color: var(--muted); text-align: center; margin-top: 100px;">
          Your formatted letter will appear here...
        </p>
      </div>
    </div>
  </div>
  
  <button type="submit" class="btn btn-primary" style="font-size: 16px; padding: 12px 24px;">
    Queue Letter for Publishing
  </button>
  
  <p class="hint">üí° Letters publish after a 12-hour steep. This gives you time to reflect, but not to obsess.</p>
  <p class="hint">üìù Markdown tips: Use **bold** for emphasis, > for quotes, and --- for dividers.</p>
</form>

<!-- Image Upload Modal -->
<div id="image-modal" style="display:none; position:fixed; top:0; left:0; right:0; bottom:0; background:rgba(0,0,0,0.5); z-index:1000; align-items:center; justify-content:center;">
  <div style="background:white; border-radius:12px; padding:24px; max-width:500px; width:90%; max-height:80vh; overflow-y:auto;">
    <h3 style="margin-top:0;">Add Image</h3>
    
    <div style="margin:16px 0;">
      <label style="display:block; margin-bottom:8px; font-weight:600;">Option 1: Image URL</label>
      <input type="url" id="image-url" placeholder="https://example.com/image.jpg" style="width:100%; padding:8px; border:1px solid var(--border); border-radius:6px;">
      <p style="font-size:12px; color:var(--muted); margin:4px 0;">Paste a direct link to an image</p>
    </div>
    
    <div style="margin:16px 0;">
      <div style="text-align:center; color:var(--muted); margin:16px 0;">‚Äî OR ‚Äî</div>
    </div>
    
    <div style="margin:16px 0;">
      <label style="display:block; margin-bottom:8px; font-weight:600;">Option 2: Upload Image</label>
      <input type="file" id="image-file" accept="image/*" style="width:100%;">
      <p style="font-size:12px; color:var(--muted); margin:4px 0;">Max 2MB. JPG, PNG, GIF, WebP</p>
    </div>
    
    <div style="margin:16px 0;">
      <label style="display:block; margin-bottom:8px;">Alt Text (optional)</label>
      <input type="text" id="image-alt" placeholder="Description of the image" style="width:100%; padding:8px; border:1px solid var(--border); border-radius:6px;">
    </div>
    
    <div id="image-preview" style="margin:16px 0; display:none;">
      <label style="display:block; margin-bottom:8px;">Preview:</label>
      <img id="preview-img" style="max-width:100%; border-radius:8px; border:1px solid var(--border);">
    </div>
    
    <div style="display:flex; gap:8px; justify-content:flex-end; margin-top:20px;">
      <button type="button" onclick="closeImageModal()" style="padding:8px 16px; border:1px solid var(--border); border-radius:6px; background:white;">Cancel</button>
      <button type="button" onclick="insertImageToEditor()" style="padding:8px 16px; border:1px solid var(--border); border-radius:6px; background:var(--fg); color:white;">Insert Image</button>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dompurify@3.0.6/dist/purify.min.js"></script>
<script>
  const editor = document.getElementById('markdown-editor');
  const preview = document.getElementById('preview');
  const charCount = document.getElementById('char-count');
  
  // Configure marked options
  marked.setOptions({
    breaks: true,
    gfm: true,
    headerIds: false,
    mangle: false
  });
  
  // Update preview
  function updatePreview() {
    const markdown = editor.value;
    if (markdown.trim()) {
      const html = marked.parse(markdown);
      // Allow data URLs for embedded images in preview
      const clean = DOMPurify.sanitize(html, {
        ADD_DATA_URI_TAGS: ['img'],
        ADD_ATTR: ['target']
      });
      preview.innerHTML = clean;
    } else {
      preview.innerHTML = '<p style="color: var(--muted); text-align: center; margin-top: 100px;">Your formatted letter will appear here...</p>';
    }
    charCount.textContent = markdown.length;
  }
  
  // Insert markdown syntax
  function insertMarkdown(before, after) {
    const start = editor.selectionStart;
    const end = editor.selectionEnd;
    const text = editor.value;
    const selected = text.substring(start, end);
    
    const replacement = before + (selected || 'text') + after;
    editor.value = text.substring(0, start) + replacement + text.substring(end);
    
    // Set cursor position
    const cursorPos = start + before.length + (selected ? selected.length : 4);
    editor.focus();
    editor.setSelectionRange(cursorPos, cursorPos);
    
    updatePreview();
  }
  
  // Update preview on input
  editor.addEventListener('input', updatePreview);
  
  // Initial preview
  updatePreview();
  
  // Keyboard shortcuts
  editor.addEventListener('keydown', (e) => {
    if (e.ctrlKey || e.metaKey) {
      switch(e.key) {
        case 'b':
          e.preventDefault();
          insertMarkdown('**', '**');
          break;
        case 'i':
          e.preventDefault();
          insertMarkdown('*', '*');
          break;
        case 'k':
          e.preventDefault();
          insertMarkdown('[', '](url)');
          break;
      }
    }
  });
  
  // Image handling
  function insertImage() {
    document.getElementById('image-modal').style.display = 'flex';
    document.getElementById('image-url').value = '';
    document.getElementById('image-alt').value = '';
    document.getElementById('image-file').value = '';
    document.getElementById('image-preview').style.display = 'none';
  }
  
  function closeImageModal() {
    document.getElementById('image-modal').style.display = 'none';
  }
  
  // Preview image from URL
  document.getElementById('image-url').addEventListener('input', function() {
    const url = this.value;
    if (url) {
      document.getElementById('preview-img').src = url;
      document.getElementById('image-preview').style.display = 'block';
      document.getElementById('image-file').value = ''; // Clear file input
    } else {
      document.getElementById('image-preview').style.display = 'none';
    }
  });
  
  // Preview image from file upload
  document.getElementById('image-file').addEventListener('change', function() {
    const file = this.files[0];
    if (file) {
      if (file.size > 2 * 1024 * 1024) {
        alert('Image must be less than 2MB');
        this.value = '';
        return;
      }
      
      const reader = new FileReader();
      reader.onload = function(e) {
        document.getElementById('preview-img').src = e.target.result;
        document.getElementById('image-preview').style.display = 'block';
        document.getElementById('image-url').value = ''; // Clear URL input
      };
      reader.readAsDataURL(file);
    }
  });
  
  function insertImageToEditor() {
    const urlInput = document.getElementById('image-url').value;
    const fileInput = document.getElementById('image-file').files[0];
    const altText = document.getElementById('image-alt').value || 'Image';
    
    if (urlInput) {
      // Insert URL image
      const markdown = `![${altText}](${urlInput})`;
      insertAtCursor(markdown);
      closeImageModal();
    } else if (fileInput) {
      // Insert base64 image
      const reader = new FileReader();
      reader.onload = function(e) {
        const markdown = `![${altText}](${e.target.result})`;
        insertAtCursor(markdown);
        closeImageModal();
      };
      reader.readAsDataURL(fileInput);
    } else {
      alert('Please provide an image URL or select a file');
    }
  }
  
  function insertAtCursor(text) {
    const start = editor.selectionStart;
    const end = editor.selectionEnd;
    const value = editor.value;
    
    editor.value = value.substring(0, start) + text + value.substring(end);
    editor.focus();
    editor.setSelectionRange(start + text.length, start + text.length);
    updatePreview();
  }
  
  // Close modal on escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      closeImageModal();
    }
  });
  
  // Close modal on background click
  document.getElementById('image-modal').addEventListener('click', function(e) {
    if (e.target === this) {
      closeImageModal();
    }
  });
</script>