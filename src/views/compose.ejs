<%- include('layout', { body: true, pageTitle: typeof draft !== 'undefined' && draft ? 'Edit Draft' : 'Compose', pageClass: 'compose' }) %>

<!-- Include marked.js for markdown parsing -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

<style>
  .compose-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
  }

  .compose-form {
    background: var(--card);
    border-radius: 12px;
    padding: 30px;
    box-shadow: 0 2px 8px var(--shadow);
  }

  .form-group {
    margin-bottom: 25px;
  }

  .form-label {
    display: block;
    font-size: 14px;
    color: var(--muted);
    margin-bottom: 8px;
    font-weight: 500;
  }

  .form-input, .form-textarea {
    width: 100%;
    padding: 12px;
    border: 1px solid var(--border);
    border-radius: 8px;
    font-size: 16px;
    background: var(--bg);
    color: var(--fg);
    transition: border-color 0.2s;
  }

  .form-input:focus, .form-textarea:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .form-textarea {
    min-height: 400px;
    resize: vertical;
    font-family: inherit;
    line-height: 1.6;
  }

  .char-count {
    text-align: right;
    font-size: 12px;
    color: var(--muted);
    margin-top: 5px;
  }

  /* Image upload section */
  .image-upload-section {
    margin: 25px 0;
    padding: 20px;
    background: var(--hover-bg);
    border-radius: 8px;
    border: 1px solid var(--border);
  }

  .image-upload-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
  }

  .image-upload-title {
    font-size: 14px;
    font-weight: 500;
    color: var(--fg);
  }

  .upload-btn {
    padding: 6px 12px;
    background: var(--primary-color);
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 13px;
    cursor: pointer;
    transition: opacity 0.2s;
  }

  .upload-btn:hover {
    opacity: 0.9;
  }

  .image-thumbnails {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
  }

  .image-thumbnail {
    position: relative;
    width: 120px;
    height: 120px;
    border-radius: 8px;
    overflow: hidden;
    border: 2px solid var(--border);
    cursor: pointer;
    transition: transform 0.2s, border-color 0.2s;
  }

  .image-thumbnail:hover {
    transform: translateY(-2px);
    border-color: var(--primary-color);
  }

  .image-thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .image-thumbnail-name {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 4px 8px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    font-size: 11px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .image-remove {
    position: absolute;
    top: 5px;
    right: 5px;
    width: 24px;
    height: 24px;
    background: rgba(255, 0, 0, 0.8);
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
    transition: background 0.2s;
  }

  .image-remove:hover {
    background: rgba(255, 0, 0, 1);
  }

  .no-images {
    text-align: center;
    padding: 30px;
    color: var(--muted);
    font-size: 14px;
  }

  /* Tag input section */
  .tag-section {
    margin: 25px 0;
  }

  .tag-input-wrapper {
    position: relative;
    margin-bottom: 10px;
  }

  .tag-input {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid var(--border);
    border-radius: 6px;
    font-size: 14px;
    background: var(--bg);
    color: var(--fg);
  }

  .selected-tags {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    margin-top: 10px;
  }

  .selected-tag {
    display: inline-flex;
    align-items: center;
    gap: 5px;
    padding: 4px 10px;
    background: var(--hover-bg);
    border: 1px solid var(--border);
    border-radius: 20px;
    font-size: 13px;
    color: var(--fg);
  }

  .selected-tag button {
    background: none;
    border: none;
    color: var(--muted);
    cursor: pointer;
    font-size: 16px;
    padding: 0;
    margin: 0;
    line-height: 1;
  }

  .selected-tag button:hover {
    color: var(--fg);
  }

  /* Action buttons */
  .form-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    margin-top: 30px;
  }

  .btn {
    padding: 10px 20px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    border: none;
    cursor: pointer;
    transition: all 0.2s;
  }

  .btn-secondary {
    background: var(--hover-bg);
    color: var(--fg);
    border: 1px solid var(--border);
  }

  .btn-secondary:hover {
    background: var(--border);
  }

  .btn-primary {
    background: var(--primary-color);
    color: white;
  }

  .btn-primary:hover {
    opacity: 0.9;
  }

  /* Preview modal */
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    z-index: 1000;
    align-items: center;
    justify-content: center;
    padding: 20px;
  }

  .modal.active {
    display: flex;
  }

  .modal-content {
    background: var(--card);
    border-radius: 12px;
    max-width: 800px;
    width: 100%;
    max-height: 80vh;
    overflow: auto;
    padding: 30px;
  }
  
  /* Markdown content styling in preview */
  .markdown-content {
    line-height: 1.6;
    font-size: 16px;
  }
  
  .markdown-content img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin: 16px 0;
    display: block;
  }
  
  .markdown-content h1, .markdown-content h2, .markdown-content h3 {
    margin-top: 24px;
    margin-bottom: 16px;
  }
  
  .markdown-content p {
    margin-bottom: 16px;
  }
  
  .markdown-content ul, .markdown-content ol {
    margin-bottom: 16px;
    padding-left: 24px;
  }
  
  .markdown-content blockquote {
    border-left: 4px solid var(--border);
    padding-left: 16px;
    margin: 16px 0;
    color: var(--muted);
    font-style: italic;
  }
  
  .markdown-content code {
    background: var(--hover-bg);
    padding: 2px 6px;
    border-radius: 4px;
    font-family: monospace;
  }
  
  .markdown-content pre {
    background: var(--hover-bg);
    padding: 12px;
    border-radius: 8px;
    overflow-x: auto;
    margin: 16px 0;
  }
  
  .markdown-content pre code {
    background: none;
    padding: 0;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }

  .modal-close {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: var(--muted);
  }

  .modal-close:hover {
    color: var(--fg);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .compose-container {
      padding: 10px;
    }

    .compose-form {
      padding: 20px;
    }

    .image-thumbnail {
      width: 80px;
      height: 80px;
    }

    .form-actions {
      flex-direction: column;
    }

    .btn {
      width: 100%;
    }
  }
</style>

<div class="compose-container">
  <div class="compose-form">
    <h1><%= typeof draft !== 'undefined' && draft ? 'Edit Draft' : 'Compose Letter' %></h1>

    <form method="post" action="/compose" id="compose-form">
      <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
      <input type="hidden" name="format" value="standard" />
      <input type="hidden" name="tags" id="tags-input" value="[]" />
      <input type="hidden" name="images" id="images-input" value="{}" />

      <div class="form-group">
        <label class="form-label" for="title">Title</label>
        <input 
          type="text" 
          id="title" 
          name="title" 
          class="form-input" 
          value="<%= typeof draft !== 'undefined' && draft ? draft.title : (values.title || '') %>"
          placeholder="Give your letter a title..."
          required
        />
      </div>

      <div class="form-group">
        <label class="form-label" for="body">Content</label>
        <textarea 
          id="body" 
          name="body" 
          class="form-textarea"
          placeholder="Write your letter here..."
          required
        ><%= typeof draft !== 'undefined' && draft ? draft.body : (values.body || '') %></textarea>
        <div class="char-count">
          <span id="word-count">0</span> words
        </div>
      </div>

      <!-- Image upload section -->
      <div class="image-upload-section">
        <div class="image-upload-header">
          <div class="image-upload-title">Images</div>
          <button type="button" class="upload-btn" onclick="openImageUpload()">
            ðŸ“· Add Image
          </button>
        </div>
        <div id="image-thumbnails" class="image-thumbnails">
          <div class="no-images" id="no-images">No images uploaded yet</div>
        </div>
      </div>

      <!-- Tag section -->
      <div class="tag-section">
        <label class="form-label" for="tag-search">Tags</label>
        <div class="tag-input-wrapper">
          <input 
            type="text" 
            id="tag-search" 
            class="tag-input"
            placeholder="Add tags..."
            autocomplete="off"
          />
        </div>
        <div id="selected-tags" class="selected-tags"></div>
      </div>

      <!-- Form actions -->
      <div class="form-actions">
        <button type="button" onclick="showPreview()" class="btn btn-secondary">
          Preview
        </button>
        <button type="submit" name="action" value="draft" class="btn btn-secondary">
          Save as Draft
        </button>
        <button type="submit" name="action" value="publish" class="btn btn-primary">
          Publish in 12h
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Image upload modal -->
<div id="image-modal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3>Add Image</h3>
      <button class="modal-close" onclick="closeImageModal()">&times;</button>
    </div>
    <div class="form-group">
      <label class="form-label">Upload Image</label>
      <input type="file" id="image-file" accept="image/*" onchange="handleImageSelect(event)" />
    </div>
    <div class="form-group">
      <label class="form-label">Or Image URL</label>
      <input type="url" id="image-url" class="form-input" placeholder="https://example.com/image.jpg" />
    </div>
    <div class="form-group">
      <label class="form-label">Alt Text (optional)</label>
      <input type="text" id="image-alt" class="form-input" placeholder="Describe the image..." />
    </div>
    <button type="button" class="btn btn-primary" onclick="insertImage()">Add Image</button>
  </div>
</div>

<!-- Preview modal -->
<div id="preview-modal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3>Preview</h3>
      <button class="modal-close" onclick="closePreviewModal()">&times;</button>
    </div>
    <div id="preview-content"></div>
  </div>
</div>

<script>
  // Initialize
  const titleInput = document.getElementById('title');
  const bodyInput = document.getElementById('body');
  const wordCount = document.getElementById('word-count');
  const tagsInput = document.getElementById('tags-input');
  const imagesInput = document.getElementById('images-input');
  
  // Image management
  let uploadedImages = {};
  let imageCounter = 0;
  
  // Tag management
  let selectedTags = [];
  
  // Update word count
  function updateWordCount() {
    const words = bodyInput.value.trim().split(/\s+/).filter(word => word.length > 0);
    wordCount.textContent = words.length;
  }
  
  bodyInput.addEventListener('input', updateWordCount);
  updateWordCount();
  
  // Image upload functions
  function openImageUpload() {
    document.getElementById('image-modal').classList.add('active');
  }
  
  function closeImageModal() {
    document.getElementById('image-modal').classList.remove('active');
    document.getElementById('image-file').value = '';
    document.getElementById('image-url').value = '';
    document.getElementById('image-alt').value = '';
  }
  
  function handleImageSelect(event) {
    const file = event.target.files[0];
    if (file && file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = function(e) {
        addImage(e.target.result, file.name);
      };
      reader.readAsDataURL(file);
    }
  }
  
  function insertImage() {
    const url = document.getElementById('image-url').value;
    const file = document.getElementById('image-file').files[0];
    const alt = document.getElementById('image-alt').value || 'Image';
    
    if (file) {
      handleImageSelect({ target: { files: [file] } });
    } else if (url) {
      // Insert URL directly into text
      const markdown = `![${alt}](${url})`;
      insertAtCursor(markdown);
    }
    closeImageModal();
  }
  
  function addImage(dataUrl, filename) {
    imageCounter++;
    const imageId = `img-${imageCounter}`;
    uploadedImages[imageId] = {
      data: dataUrl,
      name: filename
    };
    
    // Update thumbnails
    updateImageThumbnails();
    
    // Insert reference in text
    const alt = filename.replace(/\.[^/.]+$/, '');
    const markdown = `![${alt}]({{${imageId}}})`;
    insertAtCursor(markdown);
    
    // Update hidden input
    imagesInput.value = JSON.stringify(uploadedImages);
  }
  
  function updateImageThumbnails() {
    const container = document.getElementById('image-thumbnails');
    const noImages = document.getElementById('no-images');
    
    if (Object.keys(uploadedImages).length === 0) {
      noImages.style.display = 'block';
      return;
    }
    
    noImages.style.display = 'none';
    container.innerHTML = '';
    
    for (const [id, image] of Object.entries(uploadedImages)) {
      const thumb = document.createElement('div');
      thumb.className = 'image-thumbnail';
      thumb.innerHTML = `
        <img src="${image.data}" alt="${image.name}" onclick="insertImageReference('${id}', '${image.name}')">
        <div class="image-thumbnail-name">${image.name}</div>
        <button class="image-remove" onclick="removeImage('${id}')">&times;</button>
      `;
      container.appendChild(thumb);
    }
  }
  
  function insertImageReference(imageId, filename) {
    const alt = filename.replace(/\.[^/.]+$/, '');
    const markdown = `![${alt}]({{${imageId}}})`;
    insertAtCursor(markdown);
  }
  
  function removeImage(imageId) {
    delete uploadedImages[imageId];
    updateImageThumbnails();
    imagesInput.value = JSON.stringify(uploadedImages);
    
    // Remove references from text
    const pattern = new RegExp(`!\\[[^\\]]*\\]\\(\\{\\{${imageId}\\}\\}\\)`, 'g');
    bodyInput.value = bodyInput.value.replace(pattern, '');
    updateWordCount();
  }
  
  function insertAtCursor(text) {
    const start = bodyInput.selectionStart;
    const end = bodyInput.selectionEnd;
    const before = bodyInput.value.substring(0, start);
    const after = bodyInput.value.substring(end);
    
    bodyInput.value = before + text + after;
    bodyInput.focus();
    bodyInput.setSelectionRange(start + text.length, start + text.length);
    updateWordCount();
  }
  
  // Preview functions
  function showPreview() {
    const title = titleInput.value;
    let body = bodyInput.value;
    
    // Replace image placeholders with actual images
    for (const [id, image] of Object.entries(uploadedImages)) {
      const pattern = new RegExp(`\\{\\{${id}\\}\\}`, 'g');
      body = body.replace(pattern, image.data);
    }
    
    // Configure marked for proper rendering
    marked.setOptions({
      breaks: true,
      gfm: true
    });
    
    // Parse markdown to HTML
    const bodyHtml = marked.parse(body);
    const html = `
      <h1>${title}</h1>
      <div class="markdown-content">${bodyHtml}</div>
    `;
    
    document.getElementById('preview-content').innerHTML = html;
    document.getElementById('preview-modal').classList.add('active');
  }
  
  function closePreviewModal() {
    document.getElementById('preview-modal').classList.remove('active');
  }
  
  // Form submission
  document.getElementById('compose-form').addEventListener('submit', function(e) {
    // Replace image placeholders before submission
    let finalBody = bodyInput.value;
    for (const [id, image] of Object.entries(uploadedImages)) {
      // Replace {{img-1}} with the actual data URL
      // The markdown syntax ![alt]({{img-1}}) becomes ![alt](data:image/...)
      const pattern = new RegExp(`\\{\\{${id}\\}\\}`, 'g');
      finalBody = finalBody.replace(pattern, image.data);
    }
    bodyInput.value = finalBody;
    
    // Update tags
    tagsInput.value = JSON.stringify(selectedTags);
  });
  
  // Initialize with draft data if available
  <% if (typeof draft !== 'undefined' && draft) { %>
    // Restore draft images if any
    try {
      const draftImages = '<%= draft.images || '{}' %>';
      if (draftImages) {
        uploadedImages = JSON.parse(draftImages);
        updateImageThumbnails();
      }
    } catch(e) {
      console.error('Could not restore images:', e);
    }
  <% } %>
</script>
