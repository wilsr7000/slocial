<style>
  /* Ultra-minimal writing surface */
  * {
    box-sizing: border-box;
  }
  
  body.writing-surface {
    background: #fafafa;
    margin: 0;
    padding: 0;
  }
  
  [data-theme="dark"] body.writing-surface {
    background: #0d0d0d;
  }
  
  .writing-container {
    max-width: 720px;
    margin: 0 auto;
    padding: 60px 20px;
    min-height: 100vh;
  }
  
  /* Subtle header - fades in then out */
  .writing-header {
    margin-bottom: 60px;
    opacity: 0;
    animation: fadeInOut 4s ease forwards;
    animation-delay: 0.2s;
  }
  
  @keyframes fadeInOut {
    0% { opacity: 0; }
    25% { opacity: 1; }
    75% { opacity: 1; }
    100% { opacity: 0; }
  }
  
  @keyframes fadeIn {
    0% { opacity: 0; }
    100% { opacity: 1; }
  }
  
  /* Format selector - minimal and clean */
  .format-row {
    display: flex;
    gap: 20px;
    margin-bottom: 40px;
    padding-bottom: 20px;
    border-bottom: 1px solid #e5e5e5;
    opacity: 0;
    animation: fadeIn 0.8s ease forwards;
    animation-delay: 0.5s;
  }
  
  [data-theme="dark"] .format-row {
    border-bottom-color: #333;
  }
  
  .format-option {
    font-size: 13px;
    color: #999;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    padding: 4px 0;
  }
  
  [data-theme="dark"] .format-option {
    color: #666;
  }
  
  .format-option:hover {
    color: #666;
  }
  
  [data-theme="dark"] .format-option:hover {
    color: #999;
  }
  
  .format-option.active {
    color: #333;
    font-weight: 500;
  }
  
  [data-theme="dark"] .format-option.active {
    color: #e5e5e5;
  }
  
  .format-option.active::after {
    content: '';
    position: absolute;
    bottom: -21px;
    left: 0;
    right: 0;
    height: 1px;
    background: #333;
  }
  
  [data-theme="dark"] .format-option.active::after {
    background: #e5e5e5;
  }
  
  .format-detail {
    font-size: 11px;
    opacity: 0.6;
    margin-left: 2px;
  }
  
  /* Constraint indicator */
  .constraint-counter {
    position: fixed;
    bottom: 30px;
    right: 30px;
    font-size: 12px;
    color: #999;
    background: rgba(255, 255, 255, 0.9);
    padding: 8px 12px;
    border-radius: 20px;
    border: 1px solid #e5e5e5;
    opacity: 0;
    transition: all 0.3s ease;
    pointer-events: none;
  }
  
  .constraint-counter.visible {
    opacity: 1;
  }
  
  .constraint-counter.warning {
    color: #f59e0b;
    border-color: #f59e0b;
  }
  
  .constraint-counter.error {
    color: #ef4444;
    border-color: #ef4444;
  }
  
  .constraint-counter.success {
    color: #22c55e;
    border-color: #22c55e;
  }
  
  .surface-title {
    font-size: 14px;
    font-weight: 400;
    color: #999;
    letter-spacing: 0.5px;
    margin: 0;
  }
  
  [data-theme="dark"] .surface-title {
    color: #666;
  }
  
  .surface-quote {
    font-size: 15px;
    font-style: italic;
    color: #aaa;
    margin: 12px 0 0 0;
    font-family: Georgia, serif;
    line-height: 1.5;
  }
  
  /* Title input - borderless */
  .letter-title {
    width: 100%;
    padding: 0;
    margin: 0 0 40px 0;
    font-size: 32px;
    font-weight: 300;
    line-height: 1.3;
    border: none;
    background: transparent;
    color: #333;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    outline: none;
    resize: none;
    overflow: hidden;
  }
  
  [data-theme="dark"] .letter-title {
    color: #e5e5e5;
  }
  
  .letter-title::placeholder {
    color: #ddd;
  }
  
  [data-theme="dark"] .letter-title::placeholder {
    color: #555;
  }
  
  /* Writing area - completely clean */
  .letter-body {
    width: 100%;
    min-height: 60vh;
    padding: 0;
    margin: 0;
    font-family: Georgia, 'Times New Roman', serif;
    font-size: 19px;
    line-height: 1.7;
    color: #333;
    border: none;
    background: transparent;
    outline: none;
    resize: none;
  }
  
  [data-theme="dark"] .letter-body {
    color: #d5d5d5;
  }
  
  .letter-body::placeholder {
    color: #ccc;
    font-style: italic;
  }
  
  [data-theme="dark"] .letter-body::placeholder {
    color: #555;
  }
  
  /* Floating tools - always visible but subtle */
  .writing-tools {
    position: fixed;
    bottom: 30px;
    right: 30px;
    display: flex;
    gap: 12px;
    align-items: center;
    opacity: 0.4;
    transition: opacity 0.3s ease;
  }
  
  /* Theme toggle for compose page */
  .compose-theme-toggle {
    position: fixed;
    top: 20px;
    right: 20px;
    background: transparent;
    border: 1px solid #e5e5e5;
    border-radius: 20px;
    padding: 6px 12px;
    cursor: pointer;
    font-size: 12px;
    color: #666;
    transition: all 0.3s ease;
    z-index: 1000;
    opacity: 0.5;
  }
  
  .compose-theme-toggle:hover {
    opacity: 1;
    background: rgba(255, 255, 255, 0.1);
  }
  
  [data-theme="dark"] .compose-theme-toggle {
    border-color: #333;
    color: #999;
  }
  
  [data-theme="dark"] .compose-theme-toggle:hover {
    background: rgba(0, 0, 0, 0.2);
  }
  
  .writing-tools:hover {
    opacity: 1;
  }
  
  /* Minimal tool button */
  .tool-trigger {
    width: 44px;
    height: 44px;
    border-radius: 50%;
    background: white;
    border: 1px solid #e0e0e0;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
  }
  
  .tool-trigger:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(0,0,0,0.12);
  }
  
  /* Formatting palette - hidden until triggered */
  .format-palette {
    position: fixed;
    bottom: 90px;
    right: 30px;
    background: white;
    border-radius: 12px;
    padding: 8px;
    box-shadow: 0 8px 24px rgba(0,0,0,0.12);
    display: none;
    flex-direction: row;
    gap: 4px;
    align-items: center;
  }
  
  .format-palette.active {
    display: flex;
    animation: slideUp 0.2s ease;
  }
  
  @keyframes slideUp {
    from { 
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .format-btn {
    width: 36px;
    height: 36px;
    border: none;
    background: transparent;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    color: #666;
    transition: all 0.15s ease;
  }
  
  .format-btn:hover {
    background: #f5f5f5;
    color: #333;
  }
  
  .format-divider {
    width: 1px;
    height: 20px;
    background: #e0e0e0;
    margin: 0 4px;
  }
  
  /* Action buttons - minimal and fixed */
  .writing-actions {
    position: fixed;
    bottom: 30px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 12px;
    opacity: 0.5;
    transition: opacity 0.3s ease;
  }
  
  .writing-actions:hover {
    opacity: 1;
  }
  
  .action-btn {
    padding: 10px 20px;
    border-radius: 20px;
    border: 1px solid var(--border);
    background: var(--card);
    color: var(--fg);
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
    white-space: nowrap;
  }
  
  .action-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px var(--shadow-heavy);
    background: var(--hover-bg);
  }
  
  .action-btn.primary {
    background: var(--fg);
    color: var(--bg);
    border-color: var(--fg);
  }
  
  .action-btn.primary:hover {
    filter: brightness(0.9);
  }
  
  /* Word count - subtle but visible */
  .word-count {
    position: fixed;
    top: 30px;
    right: 30px;
    font-size: 12px;
    color: #ccc;
    opacity: 0.5;
    transition: opacity 0.3s ease;
  }
  
  .writing-container:hover .word-count {
    opacity: 1;
  }
  
  /* Preview mode */
  .preview-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: white;
    z-index: 1000;
    display: none;
    overflow-y: auto;
  }
  
  .preview-overlay.active {
    display: block;
  }
  
  .preview-content {
    max-width: 720px;
    margin: 0 auto;
    padding: 60px 20px;
    font-family: Georgia, serif;
    font-size: 19px;
    line-height: 1.7;
    color: #333;
  }
  
  .preview-close {
    position: fixed;
    top: 30px;
    right: 30px;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background: white;
    border: 1px solid #e0e0e0;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }
  
  .preview-close:hover {
    transform: rotate(90deg);
  }
  
  /* Focus indicator */
  .focus-indicator {
    position: fixed;
    top: 30px;
    left: 30px;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #4CAF50;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .writing-container.focused .focus-indicator {
    opacity: 1;
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 0.3; }
    50% { opacity: 1; }
  }
  
  /* Saved indicator */
  .saved-indicator {
    position: fixed;
    top: 30px;
    left: 50%;
    transform: translateX(-50%);
    padding: 8px 16px;
    background: var(--card);
    border: 1px solid var(--border);
    border-radius: 20px;
    font-size: 13px;
    color: var(--muted);
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }
  
  .saved-indicator.show {
    opacity: 1;
  }
  
  /* Mobile adjustments */
  @media (max-width: 768px) {
    .writing-container {
      padding: 40px 20px;
    }
    
    .letter-title {
      font-size: 24px;
    }
    
    .letter-body {
      font-size: 17px;
    }
    
    .writing-tools {
      bottom: 20px;
      right: 20px;
    }
    
    .writing-actions {
      bottom: 20px;
    }
  }
  
  /* Remove all borders on focus */
  *:focus {
    outline: none;
  }
  
  /* Subtle fade when typing - but tools stay visible */
  .writing-container.typing .writing-header {
    opacity: 0.1;
  }
  
  /* Tag selector styles */
  .tag-selector-container {
    margin-top: 40px;
    padding-top: 20px;
    border-top: 1px solid var(--border, #e5e5e5);
    opacity: 0;
    animation: fadeIn 0.8s ease forwards;
    animation-delay: 0.8s;
  }
  
  .tag-selector-label {
    font-size: 13px;
    color: var(--muted, #999);
    margin-bottom: 12px;
    font-weight: 500;
    letter-spacing: 0.5px;
  }
  
  .selected-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-bottom: 12px;
    min-height: 32px;
  }
  
  .selected-tag {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 6px 12px;
    background: var(--fg, #000);
    color: var(--bg, #fff);
    border-radius: 20px;
    font-size: 13px;
    animation: fadeIn 0.2s ease;
  }
  
  .selected-tag button {
    background: none;
    border: none;
    color: var(--bg, #fff);
    cursor: pointer;
    padding: 0;
    margin: 0;
    font-size: 16px;
    line-height: 1;
    opacity: 0.6;
    transition: opacity 0.2s;
  }
  
  .selected-tag button:hover {
    opacity: 1;
  }
  
  .tag-input-wrapper {
    position: relative;
  }
  
  .tag-search-input {
    width: 100%;
    padding: 10px 14px;
    font-size: 14px;
    border: 1px solid var(--border, #e5e5e5);
    border-radius: 8px;
    background: var(--card, white);
    color: var(--fg, #333);
    transition: all 0.2s ease;
  }
  
  .tag-search-input:focus {
    border-color: var(--fg, #333);
  }
  
  .tag-suggestions {
    position: absolute;
    top: calc(100% + 4px);
    left: 0;
    right: 0;
    background: var(--card, white);
    border: 1px solid var(--border, #e5e5e5);
    border-radius: 8px;
    max-height: 200px;
    overflow-y: auto;
    display: none;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    z-index: 100;
  }
  
  [data-theme="dark"] .tag-suggestions {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }
  
  .tag-suggestions.active {
    display: block;
  }
  
  .tag-suggestion {
    padding: 10px 14px;
    cursor: pointer;
    font-size: 14px;
    transition: background 0.2s;
    border-bottom: 1px solid var(--border, #f0f0f0);
  }
  
  .tag-suggestion:last-child {
    border-bottom: none;
  }
  
  .tag-suggestion:hover,
  .tag-suggestion.selected {
    background: var(--hover-bg, #f5f5f5);
  }
  
  .tag-suggestion-name {
    font-weight: 500;
    color: var(--fg, #333);
  }
  
  .tag-suggestion-desc {
    font-size: 12px;
    color: var(--muted, #666);
    margin-top: 2px;
  }
  
  .tag-suggestion-new {
    font-style: italic;
    color: var(--muted, #666);
  }
</style>

<body class="writing-surface" data-theme="<%= typeof theme !== 'undefined' ? theme : 'light' %>">
  <button class="compose-theme-toggle" onclick="toggleComposeTheme()">
    <span id="theme-icon">🌙</span>
  </button>
  <div class="focus-indicator"></div>
  <div class="saved-indicator" id="saved-indicator">Draft saved</div>
  <div class="constraint-counter" id="constraint-counter"></div>
  
  <div class="writing-container" id="writing-container">
    <div class="writing-header">
      <p class="surface-title">WRITING SURFACE</p>
    </div>
    
    <!-- Minimal format selector -->
    <div class="format-row" id="format-row">
      <span class="format-option active" data-format="standard" onclick="selectFormat('standard')">
        Standard
      </span>
      <span class="format-option" data-format="haiku" onclick="selectFormat('haiku')">
        Haiku <span class="format-detail">17</span>
      </span>
      <span class="format-option" data-format="sixword" onclick="selectFormat('sixword')">
        Six Words
      </span>
      <span class="format-option" data-format="flash" onclick="selectFormat('flash')">
        Flash <span class="format-detail">100</span>
      </span>
      <span class="format-option" data-format="question" onclick="selectFormat('question')">
        Question
      </span>
    </div>
    
    <form method="post" id="compose-form">
      <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
      <input type="hidden" name="format" id="format-input" value="standard" />
      <input type="hidden" name="tags" id="tags-input" value="" />
      
      <textarea 
        name="title"
        class="letter-title" 
        placeholder="Title"
        maxlength="120"
        required
        rows="1"
        id="title-input"
      ><%= values.title || '' %></textarea>
      
      <textarea 
        name="body"
        class="letter-body"
        placeholder="Begin writing..."
        maxlength="50000"
        required
        id="body-input"
      ><%= values.body || '' %></textarea>
      
      <!-- Tag selector -->
      <div class="tag-selector-container" id="tag-selector-container">
        <div class="tag-selector-label">Tags (optional)</div>
        <div class="selected-tags" id="selected-tags"></div>
        <div class="tag-input-wrapper">
          <input 
            type="text" 
            class="tag-search-input" 
            id="tag-search-input" 
            placeholder="Type to search or add tags..."
          />
          <div class="tag-suggestions" id="tag-suggestions"></div>
        </div>
      </div>
      
      <!-- Hidden submit buttons for form -->
      <button type="submit" name="action" value="publish" id="publish-btn" style="display:none;"></button>
      <button type="submit" name="action" value="draft" id="draft-btn" style="display:none;"></button>
    </form>
  </div>
  
  <!-- Minimal word count -->
  <div class="word-count">
    <span id="word-count">0</span> words
  </div>
  
  <!-- Floating tools -->
  <div class="writing-tools" id="writing-tools">
    <button class="tool-trigger" onclick="toggleFormatPalette()" title="Formatting tools (B for bold, I for italic)">
      <span style="font-weight: 600; font-size: 16px;">Aa</span>
    </button>
  </div>
  
  <!-- Format palette -->
  <div class="format-palette" id="format-palette">
    <button class="format-btn" onclick="format('bold')" title="Bold">
      <strong>B</strong>
    </button>
    <button class="format-btn" onclick="format('italic')" title="Italic">
      <em>I</em>
    </button>
    <button class="format-btn" onclick="format('heading')" title="Heading">
      H
    </button>
    <div class="format-divider"></div>
    <button class="format-btn" onclick="format('quote')" title="Quote">
      "
    </button>
    <button class="format-btn" onclick="format('link')" title="Link">
      🔗
    </button>
    <button class="format-btn" onclick="format('image')" title="Image">
      📷
    </button>
    <div class="format-divider"></div>
    <button class="format-btn" onclick="format('list')" title="List">
      •
    </button>
    <button class="format-btn" onclick="showPreview()" title="Preview">
      👁
    </button>
  </div>
  
  <!-- Action buttons -->
  <div class="writing-actions">
    <button class="action-btn" onclick="saveDraft()">Save Draft</button>
    <button class="action-btn primary" onclick="publish()">Publish in 12h</button>
  </div>
  
  <!-- Preview overlay -->
  <div class="preview-overlay" id="preview-overlay">
    <button class="preview-close" onclick="hidePreview()">✕</button>
    <div class="preview-content" id="preview-content"></div>
  </div>
  
  <!-- Image modal - minimal version with upload -->
  <div id="image-modal" style="display:none; position:fixed; top:0; left:0; right:0; bottom:0; background:rgba(0,0,0,0.8); z-index:2000; align-items:center; justify-content:center;">
    <div style="background:var(--card); border-radius:8px; padding:30px; max-width:450px; width:90%; box-shadow: 0 4px 20px var(--shadow-heavy); border: 1px solid var(--border);">
      <h3 style="margin:0 0 20px 0; font-weight:400; font-size:18px;">Add Image</h3>
      
      <div style="margin-bottom:15px;">
        <label style="display:block; margin-bottom:6px; font-size:13px; color:var(--muted);">Image URL</label>
        <input type="url" id="image-url" placeholder="https://example.com/image.jpg" style="width:100%; padding:10px; border:1px solid #e0e0e0; border-radius:4px;">
      </div>
      
      <div style="text-align:center; color:var(--muted); margin:15px 0; font-size:12px;">— or —</div>
      
      <div style="margin-bottom:15px;">
        <label style="display:block; margin-bottom:6px; font-size:13px; color:var(--muted);">Upload Image (max 2MB)</label>
        <input type="file" id="image-file" accept="image/*" style="width:100%; padding:8px; border:1px solid #e0e0e0; border-radius:4px; font-size:13px;">
      </div>
      
      <div style="margin-bottom:20px;">
        <label style="display:block; margin-bottom:6px; font-size:13px; color:var(--muted);">Description (optional)</label>
        <input type="text" id="image-alt" placeholder="Describe the image..." style="width:100%; padding:10px; border:1px solid #e0e0e0; border-radius:4px;">
      </div>
      
      <div id="image-preview" style="margin-bottom:20px; display:none;">
        <img id="preview-img" style="max-width:100%; max-height:200px; border-radius:4px; border:1px solid #e0e0e0;">
      </div>
      
      <div style="display:flex; gap:10px; justify-content:flex-end;">
        <button onclick="closeImageModal()" style="padding:8px 16px; border:1px solid var(--border); background:var(--card); color:var(--fg); border-radius:4px; cursor:pointer;">Cancel</button>
        <button onclick="insertImageToEditor()" style="padding:8px 16px; border:none; background:var(--fg); color:var(--bg); border-radius:4px; cursor:pointer;">Insert</button>
      </div>
    </div>
  </div>
</body>

<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dompurify@3.0.6/dist/purify.min.js"></script>
<script>
  // Theme toggle for compose page
  function toggleComposeTheme() {
    const body = document.body;
    const currentTheme = body.getAttribute('data-theme');
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
    
    body.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
    
    // Set cookie that expires in 1 year
    const date = new Date();
    date.setFullYear(date.getFullYear() + 1);
    document.cookie = `theme=${newTheme}; path=/; expires=${date.toUTCString()}; SameSite=Lax`;
    
    // Update icon
    document.getElementById('theme-icon').textContent = newTheme === 'light' ? '🌙' : '☀️';
  }
  
  // Initialize theme icon on load
  document.addEventListener('DOMContentLoaded', () => {
    const currentTheme = document.body.getAttribute('data-theme');
    document.getElementById('theme-icon').textContent = currentTheme === 'light' ? '🌙' : '☀️';
  });
  
  // Format constraints
  const formatConstraints = {
    standard: { maxWords: null, maxChars: null, exact: null },
    haiku: { syllables: 17, lines: 3, pattern: [5, 7, 5] },
    sixword: { exactWords: 6 },
    flash: { maxWords: 100 },
    question: { endsWithQuestion: true }
  };

  let currentFormat = 'standard';

  // Format selection
  function selectFormat(format) {
    currentFormat = format;
    
    // Update UI
    document.querySelectorAll('.format-option').forEach(opt => {
      opt.classList.remove('active');
    });
    document.querySelector(`[data-format="${format}"]`).classList.add('active');
    document.getElementById('format-input').value = format;
    
    // Update counter
    updateConstraintCounter();
    
    // Show/hide title for certain formats
    const titleInput = document.getElementById('title-input');
    if (format === 'haiku' || format === 'sixword') {
      titleInput.style.opacity = '0.3';
      titleInput.placeholder = 'Optional for this format';
    } else {
      titleInput.style.opacity = '1';
      titleInput.placeholder = 'Title';
    }
  }

  // Count syllables (simple approximation)
  function countSyllables(text) {
    text = text.toLowerCase();
    let count = 0;
    let previousWasVowel = false;
    
    for (let i = 0; i < text.length; i++) {
      const isVowel = 'aeiouy'.includes(text[i]);
      if (isVowel && !previousWasVowel) {
        count++;
      }
      previousWasVowel = isVowel;
    }
    
    // Adjust for silent e
    if (text.endsWith('e')) count--;
    
    // Ensure at least 1 syllable per word
    const words = text.trim().split(/\s+/).filter(w => w.length > 0);
    return Math.max(count, words.length);
  }

  // Update constraint counter
  function updateConstraintCounter() {
    const counter = document.getElementById('constraint-counter');
    const bodyInput = document.getElementById('body-input');
    const text = bodyInput.value.trim();
    
    if (currentFormat === 'standard') {
      counter.classList.remove('visible');
      return;
    }
    
    counter.classList.add('visible');
    let message = '';
    let status = 'normal';
    
    switch(currentFormat) {
      case 'haiku':
        const syllableCount = countSyllables(text);
        message = `${syllableCount}/17 syllables`;
        if (syllableCount === 17) status = 'success';
        else if (syllableCount > 17) status = 'error';
        else if (syllableCount > 14) status = 'warning';
        break;
        
      case 'sixword':
        const wordCount = text ? text.split(/\s+/).length : 0;
        message = `${wordCount}/6 words`;
        if (wordCount === 6) status = 'success';
        else if (wordCount > 6) status = 'error';
        else if (wordCount >= 4) status = 'warning';
        break;
        
      case 'flash':
        const flashWords = text ? text.split(/\s+/).length : 0;
        message = `${flashWords}/100 words`;
        if (flashWords <= 100 && flashWords > 50) status = 'success';
        else if (flashWords > 100) status = 'error';
        else if (flashWords > 90) status = 'warning';
        break;
        
      case 'question':
        const endsWithQ = text.endsWith('?');
        message = endsWithQ ? '✓ Ends with ?' : 'Must end with ?';
        status = endsWithQ ? 'success' : (text.length > 10 ? 'warning' : 'normal');
        break;
    }
    
    counter.textContent = message;
    counter.className = 'constraint-counter visible';
    if (status !== 'normal') {
      counter.classList.add(status);
    }
  }

  const titleInput = document.getElementById('title-input');
  const bodyInput = document.getElementById('body-input');
  const wordCount = document.getElementById('word-count');
  const container = document.getElementById('writing-container');
  const formatPalette = document.getElementById('format-palette');
  
  // Store uploaded images with placeholders
  let uploadedImages = {};
  let imageCounter = 0;
  
  // Auto-save state
  let autoSaveTimer;
  let lastSavedContent = {
    title: '<%= values.title || '' %>',
    body: '<%= values.body || '' %>'
  };
  let draftId = <%= typeof draft !== 'undefined' && draft ? draft.id : 'null' %>;
  
  // Auto-resize title
  function resizeTitle() {
    titleInput.style.height = 'auto';
    titleInput.style.height = titleInput.scrollHeight + 'px';
  }
  
  titleInput.addEventListener('input', () => {
    resizeTitle();
    scheduleAutoSave();
  });
  resizeTitle();
  
  // Word count
  function updateWordCount() {
    const text = bodyInput.value;
    const words = text.trim() ? text.trim().split(/\s+/).length : 0;
    wordCount.textContent = words;
  }
  
  bodyInput.addEventListener('input', () => {
    updateWordCount();
    updateConstraintCounter();
    scheduleAutoSave();
  });
  updateWordCount();
  
  // Typing indicator
  let typingTimer;
  bodyInput.addEventListener('input', () => {
    container.classList.add('typing');
    clearTimeout(typingTimer);
    typingTimer = setTimeout(() => {
      container.classList.remove('typing');
    }, 2000);
  });
  
  // Focus indicator
  bodyInput.addEventListener('focus', () => {
    container.classList.add('focused');
  });
  
  bodyInput.addEventListener('blur', () => {
    container.classList.remove('focused');
  });
  
  // Format palette
  function toggleFormatPalette() {
    formatPalette.classList.toggle('active');
  }
  
  // Click outside to close
  document.addEventListener('click', (e) => {
    if (!e.target.closest('.writing-tools') && !e.target.closest('.format-palette')) {
      formatPalette.classList.remove('active');
    }
  });
  
  // Format functions
  function format(type) {
    const start = bodyInput.selectionStart;
    const end = bodyInput.selectionEnd;
    const text = bodyInput.value;
    const selected = text.substring(start, end);
    
    let before = '', after = '';
    switch(type) {
      case 'bold':
        before = '**'; after = '**';
        break;
      case 'italic':
        before = '*'; after = '*';
        break;
      case 'heading':
        before = '## '; after = '';
        break;
      case 'quote':
        before = '> '; after = '';
        break;
      case 'link':
        before = '['; after = '](url)';
        break;
      case 'list':
        before = '- '; after = '';
        break;
      case 'image':
        document.getElementById('image-modal').style.display = 'flex';
        return;
    }
    
    const replacement = before + (selected || 'text') + after;
    bodyInput.value = text.substring(0, start) + replacement + text.substring(end);
    bodyInput.focus();
    bodyInput.setSelectionRange(start + before.length, start + before.length + (selected || 'text').length);
    formatPalette.classList.remove('active');
  }
  
  // Preview
  function showPreview() {
    const title = titleInput.value;
    let body = bodyInput.value;
    
    // Replace image placeholders with actual base64 data for preview
    for (const [imageId, base64Data] of Object.entries(uploadedImages)) {
      const placeholderPattern = new RegExp(`\\(📷 ${imageId}\\)`, 'g');
      body = body.replace(placeholderPattern, `(${base64Data})`);
    }
    
    marked.setOptions({
      breaks: true,
      gfm: true
    });
    
    const html = `<h1>${title}</h1>` + marked.parse(body);
    const clean = DOMPurify.sanitize(html, {
      ADD_DATA_URI_TAGS: ['img'],
      ADD_ATTR: ['target']
    });
    
    document.getElementById('preview-content').innerHTML = clean;
    document.getElementById('preview-overlay').classList.add('active');
    formatPalette.classList.remove('active');
  }
  
  function hidePreview() {
    document.getElementById('preview-overlay').classList.remove('active');
  }
  
  // Image handling
  function closeImageModal() {
    document.getElementById('image-modal').style.display = 'none';
    document.getElementById('image-url').value = '';
    document.getElementById('image-file').value = '';
    document.getElementById('image-alt').value = '';
    document.getElementById('image-preview').style.display = 'none';
  }
  
  function insertImageToEditor() {
    const url = document.getElementById('image-url').value;
    const file = document.getElementById('image-file').files[0];
    const alt = document.getElementById('image-alt').value || 'Image';
    
    if (url) {
      const markdown = `![${alt}](${url})`;
      const start = bodyInput.selectionStart;
      const text = bodyInput.value;
      bodyInput.value = text.substring(0, start) + markdown + text.substring(start);
      bodyInput.focus();
      closeImageModal();
    } else if (file) {
      // Check file size (2MB limit)
      if (file.size > 2 * 1024 * 1024) {
        alert('Image too large. Please use images under 2MB or use an image URL.');
        return;
      }
      
      const reader = new FileReader();
      reader.onload = function(e) {
        imageCounter++;
        const imageId = `uploaded-image-${imageCounter}`;
        const placeholder = `![${alt}](📷 ${imageId})`;
        
        // Store the actual base64 data
        uploadedImages[imageId] = e.target.result;
        
        // Insert clean placeholder in editor
        const start = bodyInput.selectionStart;
        const text = bodyInput.value;
        bodyInput.value = text.substring(0, start) + placeholder + text.substring(start);
        bodyInput.focus();
        closeImageModal();
      };
      reader.readAsDataURL(file);
    } else {
      alert('Please provide an image URL or select a file');
    }
  }
  
  // Image preview handlers
  document.getElementById('image-url').addEventListener('input', function() {
    const url = this.value;
    if (url) {
      document.getElementById('preview-img').src = url;
      document.getElementById('image-preview').style.display = 'block';
      document.getElementById('image-file').value = '';
    } else {
      document.getElementById('image-preview').style.display = 'none';
    }
  });
  
  document.getElementById('image-file').addEventListener('change', function() {
    const file = this.files[0];
    if (file) {
      if (file.size > 2 * 1024 * 1024) {
        alert('Image too large. Please use images under 2MB.');
        this.value = '';
        return;
      }
      const reader = new FileReader();
      reader.onload = function(e) {
        document.getElementById('preview-img').src = e.target.result;
        document.getElementById('image-preview').style.display = 'block';
        document.getElementById('image-url').value = '';
      };
      reader.readAsDataURL(file);
    }
  });
  
  // Actions
  function saveDraft() {
    document.getElementById('draft-btn').click();
  }
  
  function publish() {
    document.getElementById('publish-btn').click();
  }
  
  // Auto-save functionality
  async function autoSave() {
    const title = titleInput.value.trim();
    const body = bodyInput.value.trim();
    
    // Don't save if empty or unchanged
    if (!title || !body || (title === lastSavedContent.title && body === lastSavedContent.body)) {
      return;
    }
    
    // Prepare the content with placeholders replaced
    let finalBody = body;
    for (const [imageId, base64Data] of Object.entries(uploadedImages)) {
      const placeholderPattern = new RegExp(`\\(📷 ${imageId}\\)`, 'g');
      finalBody = finalBody.replace(placeholderPattern, `(${base64Data})`);
    }
    
    try {
      const response = await fetch('/api/draft', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': '<%= csrfToken %>'
        },
        body: JSON.stringify({
          id: draftId,
          title: title,
          body: finalBody
        })
      });
      
      if (response.ok) {
        const data = await response.json();
        draftId = data.draftId;
        lastSavedContent = { title, body };
        
        // Show saved indicator
        const indicator = document.getElementById('saved-indicator');
        indicator.textContent = 'Draft saved';
        indicator.classList.add('show');
        setTimeout(() => {
          indicator.classList.remove('show');
        }, 2000);
      }
    } catch (error) {
      console.error('Auto-save failed:', error);
    }
  }
  
  function scheduleAutoSave() {
    clearTimeout(autoSaveTimer);
    autoSaveTimer = setTimeout(autoSave, 30000); // Save after 30 seconds of typing
  }
  
  // Auto-save indicator
  <% if (typeof draft !== 'undefined' && draft) { %>
    document.getElementById('saved-indicator').classList.add('show');
    setTimeout(() => {
      document.getElementById('saved-indicator').classList.remove('show');
    }, 3000);
  <% } %>
  
  // Keyboard shortcuts
  document.addEventListener('keydown', (e) => {
    if (e.ctrlKey || e.metaKey) {
      switch(e.key) {
        case 'b':
          e.preventDefault();
          format('bold');
          break;
        case 'i':
          e.preventDefault();
          format('italic');
          break;
        case 's':
          e.preventDefault();
          saveDraft();
          break;
        case 'Enter':
          e.preventDefault();
          publish();
          break;
      }
    }
    
    // Escape to close modals
    if (e.key === 'Escape') {
      hidePreview();
      closeImageModal();
      formatPalette.classList.remove('active');
      document.getElementById('tag-suggestions').classList.remove('active');
    }
  });
  
  // Tag selector functionality
  let availableTags = [];
  let selectedTags = [];
  let selectedSuggestionIndex = -1;
  
  // Fetch available tags that user has access to
  async function fetchAvailableTags() {
    try {
      const response = await fetch('/api/tags/available');
      if (response.ok) {
        availableTags = await response.json();
      }
    } catch (error) {
      console.error('Error fetching tags:', error);
    }
  }
  
  // Initialize tags on load
  fetchAvailableTags();
  
  const tagSearchInput = document.getElementById('tag-search-input');
  const tagSuggestions = document.getElementById('tag-suggestions');
  const selectedTagsContainer = document.getElementById('selected-tags');
  const tagsHiddenInput = document.getElementById('tags-input');
  
  // Show suggestions when input is focused
  tagSearchInput.addEventListener('focus', () => {
    if (tagSearchInput.value.trim()) {
      showTagSuggestions(tagSearchInput.value);
    }
  });
  
  // Handle tag search input
  tagSearchInput.addEventListener('input', (e) => {
    const query = e.target.value.trim();
    if (query) {
      showTagSuggestions(query);
    } else {
      tagSuggestions.classList.remove('active');
    }
  });
  
  // Handle keyboard navigation in suggestions
  tagSearchInput.addEventListener('keydown', (e) => {
    const suggestions = tagSuggestions.querySelectorAll('.tag-suggestion');
    
    if (e.key === 'ArrowDown') {
      e.preventDefault();
      selectedSuggestionIndex = Math.min(selectedSuggestionIndex + 1, suggestions.length - 1);
      updateSelectedSuggestion(suggestions);
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      selectedSuggestionIndex = Math.max(selectedSuggestionIndex - 1, 0);
      updateSelectedSuggestion(suggestions);
    } else if (e.key === 'Enter') {
      e.preventDefault();
      if (selectedSuggestionIndex >= 0 && suggestions[selectedSuggestionIndex]) {
        suggestions[selectedSuggestionIndex].click();
      } else if (tagSearchInput.value.trim()) {
        // Add as new tag if no suggestion selected
        addTag({ name: tagSearchInput.value.trim(), id: null, isNew: true });
      }
    } else if (e.key === 'Escape') {
      tagSuggestions.classList.remove('active');
      selectedSuggestionIndex = -1;
    }
  });
  
  function updateSelectedSuggestion(suggestions) {
    suggestions.forEach((s, i) => {
      if (i === selectedSuggestionIndex) {
        s.classList.add('selected');
      } else {
        s.classList.remove('selected');
      }
    });
  }
  
  function showTagSuggestions(query) {
    const lowerQuery = query.toLowerCase();
    
    // Filter available tags that match the query and aren't already selected
    const filteredTags = availableTags.filter(tag => 
      !selectedTags.find(st => st.id === tag.id) &&
      (tag.name.toLowerCase().includes(lowerQuery) || 
       (tag.description && tag.description.toLowerCase().includes(lowerQuery)))
    );
    
    // Build suggestions HTML
    let html = '';
    
    // Show matching existing tags
    filteredTags.slice(0, 5).forEach(tag => {
      html += `
        <div class="tag-suggestion" data-tag-id="${tag.id}" data-tag-name="${tag.name}">
          <div class="tag-suggestion-name">#${tag.name}</div>
          ${tag.description ? `<div class="tag-suggestion-desc">${tag.description}</div>` : ''}
        </div>
      `;
    });
    
    // Option to create new tag if no exact match
    const exactMatch = availableTags.find(tag => tag.name.toLowerCase() === lowerQuery);
    if (!exactMatch && query.length > 0) {
      html += `
        <div class="tag-suggestion tag-suggestion-new" data-tag-name="${query}" data-new="true">
          <div class="tag-suggestion-name">Create new tag: #${query}</div>
        </div>
      `;
    }
    
    if (html) {
      tagSuggestions.innerHTML = html;
      tagSuggestions.classList.add('active');
      selectedSuggestionIndex = -1;
      
      // Add click handlers to suggestions
      tagSuggestions.querySelectorAll('.tag-suggestion').forEach(suggestion => {
        suggestion.addEventListener('click', () => {
          const tagId = suggestion.dataset.tagId;
          const tagName = suggestion.dataset.tagName;
          const isNew = suggestion.dataset.new === 'true';
          
          addTag({ id: tagId, name: tagName, isNew });
        });
      });
    } else {
      tagSuggestions.classList.remove('active');
    }
  }
  
  function addTag(tag) {
    // Check if tag is already selected
    if (selectedTags.find(st => st.name === tag.name)) {
      return;
    }
    
    selectedTags.push(tag);
    updateSelectedTagsDisplay();
    updateTagsHiddenInput();
    
    // Clear input and hide suggestions
    tagSearchInput.value = '';
    tagSuggestions.classList.remove('active');
  }
  
  function removeTag(tagName) {
    selectedTags = selectedTags.filter(t => t.name !== tagName);
    updateSelectedTagsDisplay();
    updateTagsHiddenInput();
  }
  
  function updateSelectedTagsDisplay() {
    selectedTagsContainer.innerHTML = selectedTags.map(tag => `
      <div class="selected-tag">
        #${tag.name}
        <button type="button" onclick="removeTag('${tag.name}')" title="Remove tag">×</button>
      </div>
    `).join('');
  }
  
  function updateTagsHiddenInput() {
    // Store both IDs (for existing tags) and names (for new tags)
    tagsHiddenInput.value = JSON.stringify(selectedTags);
  }
  
  // Hide suggestions when clicking outside
  document.addEventListener('click', (e) => {
    if (!e.target.closest('.tag-input-wrapper')) {
      tagSuggestions.classList.remove('active');
    }
  });
</script>
